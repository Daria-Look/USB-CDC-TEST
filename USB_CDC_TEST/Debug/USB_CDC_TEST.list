
USB_CDC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d60  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f54  08007f54  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f5c  08007f5c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  200000fc  08008060  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  08008060  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138a8  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa6  00000000  00000000  000339d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00036980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000378c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e4  00000000  00000000  000386d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139bf  00000000  00000000  000510bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a70c  00000000  00000000  00064a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea4  00000000  00000000  000ef1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007edc 	.word	0x08007edc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007edc 	.word	0x08007edc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <RF_ShiftRegs>:
#define RF_SRE_GPIO_Port GPIO_PIN_13
#define RF_SRE_Pin GPIO_PIN_13
#define RF_SRL_GPIO_Port GPIO_PIN_13
#define RF_SRL_Pin GPIO_PIN_13
uint8_t regD= 0b00000000; //состояние сдвиговика
void RF_ShiftRegs(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
			HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 1); //shiftreg 2 HiZ
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004f8:	f000 fde8 	bl	80010cc <HAL_GPIO_WritePin>
			uint8_t buf;
			HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 0);  //отключаем защёлку
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000506:	f000 fde1 	bl	80010cc <HAL_GPIO_WritePin>

			HAL_SPI_TransmitReceive(&hspi2, &regD, &buf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 800050a:	1dfa      	adds	r2, r7, #7
 800050c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	490a      	ldr	r1, [pc, #40]	; (8000540 <RF_ShiftRegs+0x58>)
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <RF_ShiftRegs+0x5c>)
 8000518:	f002 fd4f 	bl	8002fba <HAL_SPI_TransmitReceive>

			HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 1);  //включаем защёлку
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000526:	f000 fdd1 	bl	80010cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 0);  //shitfreg вывести из HiZ
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000534:	f000 fdca 	bl	80010cc <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200001b4 	.word	0x200001b4
 8000544:	20000118 	.word	0x20000118

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0c2      	sub	sp, #264	; 0x108
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa91 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f833 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8fb 	bl	8000750 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800055a:	f006 ff83 	bl	8007464 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800055e:	f000 f897 	bl	8000690 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8000562:	f000 f8cb 	bl	80006fc <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  regD = 0b00010000;
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <main+0x6c>)
 8000568:	2210      	movs	r2, #16
 800056a:	701a      	strb	r2, [r3, #0]
  RF_ShiftRegs();
 800056c:	f7ff ffbc 	bl	80004e8 <RF_ShiftRegs>
  regD = 0b00011000;
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0x6c>)
 8000572:	2218      	movs	r2, #24
 8000574:	701a      	strb	r2, [r3, #0]
  RF_ShiftRegs();
 8000576:	f7ff ffb7 	bl	80004e8 <RF_ShiftRegs>
	      {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      	uint8_t str[256];
	      	uint8_t p=9;
 800057a:	2309      	movs	r3, #9
 800057c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	      	uint8_t t= 102;
 8000580:	2366      	movs	r3, #102	; 0x66
 8000582:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	      	HAL_UART_Receive(&huart6, str, 256, 1000);
 8000586:	1d39      	adds	r1, r7, #4
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x70>)
 8000592:	f002 ffcc 	bl	800352e <HAL_UART_Receive>
	      	//snprintf(str, sizeof(str), "pressure=%03u Pa, temp=%u degr ", p, t);
	        HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 fadd 	bl	8000b58 <HAL_Delay>
	        CDC_Transmit_FS(str, strlen(str));
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe17 	bl	80001d4 <strlen>
 80005a6:	4602      	mov	r2, r0
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f007 f817 	bl	80075e0 <CDC_Transmit_FS>
	      {
 80005b2:	e7e2      	b.n	800057a <main+0x32>
 80005b4:	200001b4 	.word	0x200001b4
 80005b8:	20000170 	.word	0x20000170

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 fc7e 	bl	8007ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xd0>)
 800060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ffd7 	bl	80025f8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f8c2 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fa3a 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f8ad 	bl	80007d8 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI2_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI2_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI2_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI2_Init+0x64>)
 80006e2:	f002 fbe1 	bl	8002ea8 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f874 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000118 	.word	0x20000118
 80006f8:	40003800 	.word	0x40003800

080006fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART6_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART6_UART_Init+0x4c>)
 8000734:	f002 feae 	bl	8003494 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f84b 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000170 	.word	0x20000170
 800074c:	40011400 	.word	0x40011400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x84>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_SPI_MspInit+0xc0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d14a      	bne.n	80008ec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_SPI_MspInit+0xc4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <HAL_SPI_MspInit+0xc8>)
 80008c6:	f000 fa7d 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008dc:	2305      	movs	r3, #5
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <HAL_SPI_MspInit+0xcc>)
 80008e8:	f000 fa6c 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020400 	.word	0x40020400

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_UART_MspInit+0x84>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d12b      	bne.n	800097e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x88>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_UART_MspInit+0x88>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0x88>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_UART_MspInit+0x88>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_UART_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800096e:	2308      	movs	r3, #8
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_UART_MspInit+0x8c>)
 800097a:	f000 fa23 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40011400 	.word	0x40011400
 800098c:	40023800 	.word	0x40023800
 8000990:	40020800 	.word	0x40020800

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f89a 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <OTG_FS_IRQHandler+0x10>)
 80009ee:	f000 fcd6 	bl	800139e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000e9c 	.word	0x20000e9c

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4a:	f7ff ffd7 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f007 fa19 	bl	8007e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd79 	bl	8000548 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a64:	08007f64 	.word	0x08007f64
  ldr r2, =_sbss
 8000a68:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a6c:	200015c8 	.word	0x200015c8

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f94f 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe9c 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f967 	bl	8000daa <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f92f 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200001b8 	.word	0x200001b8

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200001b8 	.word	0x200001b8

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff3e 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff31 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e159      	b.n	8001094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8148 	bne.w	800108e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a2 	beq.w	800108e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_GPIO_Init+0x2f4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fe>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x1f6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x1f2>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	; (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x304>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_GPIO_Init+0x304>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_GPIO_Init+0x304>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f aea2 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001100:	b08f      	sub	sp, #60	; 0x3c
 8001102:	af0a      	add	r7, sp, #40	; 0x28
 8001104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e10f      	b.n	8001330 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f006 fba0 	bl	8007870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fe87 	bl	8003e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	687e      	ldr	r6, [r7, #4]
 800115c:	466d      	mov	r5, sp
 800115e:	f106 0410 	add.w	r4, r6, #16
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001172:	1d33      	adds	r3, r6, #4
 8001174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f002 fd5e 	bl	8003c38 <USB_CoreInit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2202      	movs	r2, #2
 8001186:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0d0      	b.n	8001330 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fe75 	bl	8003e84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e04a      	b.n	8001236 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	333d      	adds	r3, #61	; 0x3d
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	333c      	adds	r3, #60	; 0x3c
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	b298      	uxth	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3344      	adds	r3, #68	; 0x44
 80011dc:	4602      	mov	r2, r0
 80011de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	3340      	adds	r3, #64	; 0x40
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3348      	adds	r3, #72	; 0x48
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	334c      	adds	r3, #76	; 0x4c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3354      	adds	r3, #84	; 0x54
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3af      	bcc.n	80011a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e044      	b.n	80012d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3b5      	bcc.n	8001246 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	687e      	ldr	r6, [r7, #4]
 80012e2:	466d      	mov	r5, sp
 80012e4:	f106 0410 	add.w	r4, r6, #16
 80012e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f8:	1d33      	adds	r3, r6, #4
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f002 fe0d 	bl	8003f1c <USB_DevInit>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e00d      	b.n	8001330 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f003 ff5c 	bl	80051e6 <USB_DevDisconnect>

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001338 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_PCD_Start+0x1c>
 8001350:	2302      	movs	r3, #2
 8001352:	e020      	b.n	8001396 <HAL_PCD_Start+0x5e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	2b01      	cmp	r3, #1
 8001362:	d109      	bne.n	8001378 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fd5f 	bl	8003e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f003 ff0c 	bl	80051a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800139e:	b590      	push	{r4, r7, lr}
 80013a0:	b08d      	sub	sp, #52	; 0x34
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 ffca 	bl	800534e <USB_GetMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 848a 	bne.w	8001cd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 ff2e 	bl	8005228 <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8480 	beq.w	8001cd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 ff1b 	bl	8005228 <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d107      	bne.n	800140c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f002 0202 	and.w	r2, r2, #2
 800140a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 ff09 	bl	8005228 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b10      	cmp	r3, #16
 800141e:	d161      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0210 	bic.w	r2, r2, #16
 800142e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f003 020f 	and.w	r2, r3, #15
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	3304      	adds	r3, #4
 800144e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	0c5b      	lsrs	r3, r3, #17
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	2b02      	cmp	r3, #2
 800145a:	d124      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d035      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	6a38      	ldr	r0, [r7, #32]
 800147c:	f003 fd40 	bl	8004f00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149e:	441a      	add	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	621a      	str	r2, [r3, #32]
 80014a4:	e016      	b.n	80014d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	0c5b      	lsrs	r3, r3, #17
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d110      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b8:	2208      	movs	r2, #8
 80014ba:	4619      	mov	r1, r3
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f003 fd1f 	bl	8004f00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ce:	441a      	add	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0210 	orr.w	r2, r2, #16
 80014e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fe9d 	bl	8005228 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014f8:	f040 80a7 	bne.w	800164a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fea2 	bl	800524e <USB_ReadDevAllOutEpInterrupt>
 800150a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800150c:	e099      	b.n	8001642 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 808e 	beq.w	8001636 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fec6 	bl	80052b6 <USB_ReadDevOutEPInterrupt>
 800152a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00c      	beq.n	8001550 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001542:	461a      	mov	r2, r3
 8001544:	2301      	movs	r3, #1
 8001546:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fec2 	bl	80022d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00c      	beq.n	8001574 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001566:	461a      	mov	r2, r3
 8001568:	2308      	movs	r3, #8
 800156a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 ff98 	bl	80024a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158a:	461a      	mov	r2, r3
 800158c:	2310      	movs	r3, #16
 800158e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d030      	beq.n	80015fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a2:	2b80      	cmp	r3, #128	; 0x80
 80015a4:	d109      	bne.n	80015ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2200      	movs	r2, #0
 80015dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f006 fa3f 	bl	8007a68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f6:	461a      	mov	r2, r3
 80015f8:	2302      	movs	r3, #2
 80015fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	015a      	lsls	r2, r3, #5
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001612:	461a      	mov	r2, r3
 8001614:	2320      	movs	r3, #32
 8001616:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d009      	beq.n	8001636 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	015a      	lsls	r2, r3, #5
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162e:	461a      	mov	r2, r3
 8001630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001634:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	3301      	adds	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f af62 	bne.w	800150e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fdea 	bl	8005228 <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800165e:	f040 80db 	bne.w	8001818 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fe0b 	bl	8005282 <USB_ReadDevAllInEpInterrupt>
 800166c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001672:	e0cd      	b.n	8001810 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80c2 	beq.w	8001804 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fe31 	bl	80052f2 <USB_ReadDevInEPInterrupt>
 8001690:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d057      	beq.n	800174c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	2201      	movs	r2, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69f9      	ldr	r1, [r7, #28]
 80016b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016bc:	4013      	ands	r3, r2
 80016be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016cc:	461a      	mov	r2, r3
 80016ce:	2301      	movs	r3, #1
 80016d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d132      	bne.n	8001740 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	334c      	adds	r3, #76	; 0x4c
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4403      	add	r3, r0
 80016fa:	3348      	adds	r3, #72	; 0x48
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4419      	add	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4403      	add	r3, r0
 800170e:	334c      	adds	r3, #76	; 0x4c
 8001710:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	2b00      	cmp	r3, #0
 8001716:	d113      	bne.n	8001740 <HAL_PCD_IRQHandler+0x3a2>
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3354      	adds	r3, #84	; 0x54
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001738:	461a      	mov	r2, r3
 800173a:	2101      	movs	r1, #1
 800173c:	f003 fe38 	bl	80053b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f006 f913 	bl	8007972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	461a      	mov	r2, r3
 8001764:	2308      	movs	r3, #8
 8001766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	2310      	movs	r3, #16
 8001782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179a:	461a      	mov	r2, r3
 800179c:	2340      	movs	r3, #64	; 0x40
 800179e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d023      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f002 fd19 	bl	80041e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3338      	adds	r3, #56	; 0x38
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	3304      	adds	r3, #4
 80017c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	78db      	ldrb	r3, [r3, #3]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2200      	movs	r2, #0
 80017d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f006 f956 	bl	8007a8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ec:	461a      	mov	r2, r3
 80017ee:	2302      	movs	r3, #2
 80017f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fcdb 	bl	80021ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3301      	adds	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f af2e 	bne.w	8001674 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fd03 	bl	8005228 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800182c:	d122      	bne.n	8001874 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001854:	2100      	movs	r1, #0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fec2 	bl	80025e0 <HAL_PCDEx_LPM_Callback>
 800185c:	e002      	b.n	8001864 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f006 f8f4 	bl	8007a4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fcd5 	bl	8005228 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001888:	d112      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f006 f8b0 	bl	8007a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 fcb7 	bl	8005228 <USB_ReadInterrupts>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c4:	f040 80b7 	bne.w	8001a36 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2110      	movs	r1, #16
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fc7e 	bl	80041e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ec:	e046      	b.n	800197c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fa:	461a      	mov	r2, r3
 80018fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001900:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	0151      	lsls	r1, r2, #5
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	440a      	add	r2, r1
 8001918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800191c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001920:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192e:	461a      	mov	r2, r3
 8001930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001934:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001946:	0151      	lsls	r1, r2, #5
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	440a      	add	r2, r1
 800194c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001966:	0151      	lsls	r1, r2, #5
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	440a      	add	r2, r1
 800196c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001974:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	429a      	cmp	r2, r3
 8001984:	d3b3      	bcc.n	80018ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001994:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001998:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d016      	beq.n	80019d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b2:	f043 030b 	orr.w	r3, r3, #11
 80019b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c8:	f043 030b 	orr.w	r3, r3, #11
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	e015      	b.n	80019fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f6:	f043 030b 	orr.w	r3, r3, #11
 80019fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a20:	461a      	mov	r2, r3
 8001a22:	f003 fcc5 	bl	80053b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fbf4 	bl	8005228 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4a:	d124      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fc8a 	bl	800536a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fc3f 	bl	80042de <USB_GetDevSpeed>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681c      	ldr	r4, [r3, #0]
 8001a6c:	f001 f9e8 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8001a70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f002 f93e 	bl	8003cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f005 ff9e 	bl	80079c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fbc4 	bl	8005228 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f005 ff7b 	bl	80079a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f002 0208 	and.w	r2, r2, #8
 8001abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fbaf 	bl	8005228 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad0:	2b80      	cmp	r3, #128	; 0x80
 8001ad2:	d122      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e014      	b.n	8001b10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fb27 	bl	8002158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3e5      	bcc.n	8001ae6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fb82 	bl	8005228 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2e:	d13b      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e02b      	b.n	8001b8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3340      	adds	r3, #64	; 0x40
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d115      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da12      	bge.n	8001b88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	333f      	adds	r3, #63	; 0x3f
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fae8 	bl	8002158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3ce      	bcc.n	8001b36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fb3b 	bl	8005228 <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bbc:	d155      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	e045      	b.n	8001c50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d12e      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da2b      	bge.n	8001c4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bfe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d121      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6053      	str	r3, [r2, #4]
            break;
 8001c48:	e007      	b.n	8001c5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d3b4      	bcc.n	8001bc4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fada 	bl	8005228 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d10a      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f005 ff15 	bl	8007ab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fac4 	bl	8005228 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d115      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 ff05 	bl	8007acc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e000      	b.n	8001cd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001cd4:	bf00      	nop
    }
  }
}
 8001cd6:	3734      	adds	r7, #52	; 0x34
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}

08001cdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_PCD_SetAddress+0x1a>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e013      	b.n	8001d1e <HAL_PCD_SetAddress+0x42>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fa22 	bl	8005158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	461a      	mov	r2, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	803b      	strh	r3, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da0f      	bge.n	8001d6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
 8001d6a:	e00f      	b.n	8001d8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d98:	883a      	ldrh	r2, [r7, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	78ba      	ldrb	r2, [r7, #2]
 8001da2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001db6:	78bb      	ldrb	r3, [r7, #2]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d102      	bne.n	8001dc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_EP_Open+0xaa>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e00e      	b.n	8001dee <HAL_PCD_EP_Open+0xc8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 faa2 	bl	8004328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dec:	7afb      	ldrb	r3, [r7, #11]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da0f      	bge.n	8001e2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00f      	b.n	8001e4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_EP_Close+0x6e>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e00e      	b.n	8001e82 <HAL_PCD_EP_Close+0x8c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fae0 	bl	8004438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	460b      	mov	r3, r1
 8001e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 020f 	and.w	r2, r3, #15
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	f002 fdbf 	bl	8004a80 <USB_EP0StartXfer>
 8001f02:	e008      	b.n	8001f16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6979      	ldr	r1, [r7, #20]
 8001f12:	f002 fb6d 	bl	80045f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3338      	adds	r3, #56	; 0x38
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	f002 fd5d 	bl	8004a80 <USB_EP0StartXfer>
 8001fc6:	e008      	b.n	8001fda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	f002 fb0b 	bl	80045f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d901      	bls.n	8002002 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e050      	b.n	80020a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da0f      	bge.n	800202a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3338      	adds	r3, #56	; 0x38
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	705a      	strb	r2, [r3, #1]
 8002028:	e00d      	b.n	8002046 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_PCD_EP_SetStall+0x82>
 8002062:	2302      	movs	r3, #2
 8002064:	e01e      	b.n	80020a4 <HAL_PCD_EP_SetStall+0xc0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 ff9b 	bl	8004fb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	b2d9      	uxtb	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002094:	461a      	mov	r2, r3
 8002096:	f003 f98b 	bl	80053b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d901      	bls.n	80020ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e042      	b.n	8002150 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da0f      	bge.n	80020f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3338      	adds	r3, #56	; 0x38
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	705a      	strb	r2, [r3, #1]
 80020f0:	e00f      	b.n	8002112 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	3304      	adds	r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	b2da      	uxtb	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_PCD_EP_ClrStall+0x86>
 800212e:	2302      	movs	r3, #2
 8002130:	e00e      	b.n	8002150 <HAL_PCD_EP_ClrStall+0xa4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f002 ffa3 	bl	800508c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da0c      	bge.n	8002186 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e00c      	b.n	80021a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fdc2 	bl	8004d30 <USB_EPStopXfer>
 80021ac:	4603      	mov	r3, r0
 80021ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b08a      	sub	sp, #40	; 0x28
 80021be:	af02      	add	r7, sp, #8
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	3338      	adds	r3, #56	; 0x38
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d901      	bls.n	80021f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06c      	b.n	80022cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	429a      	cmp	r2, r3
 8002206:	d902      	bls.n	800220e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3303      	adds	r3, #3
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002216:	e02b      	b.n	8002270 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	429a      	cmp	r2, r3
 800222c:	d902      	bls.n	8002234 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3303      	adds	r3, #3
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800224c:	b2db      	uxtb	r3, r3
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4603      	mov	r3, r0
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f002 fe16 	bl	8004e84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	441a      	add	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	441a      	add	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	b29b      	uxth	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	429a      	cmp	r2, r3
 8002284:	d809      	bhi.n	800229a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800228e:	429a      	cmp	r2, r3
 8002290:	d203      	bcs.n	800229a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1be      	bne.n	8002218 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d811      	bhi.n	80022ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	2201      	movs	r2, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	43db      	mvns	r3, r3
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c6:	4013      	ands	r3, r2
 80022c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	333c      	adds	r3, #60	; 0x3c
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d17b      	bne.n	8002402 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4a61      	ldr	r2, [pc, #388]	; (800249c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f240 80b9 	bls.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80b3 	beq.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002336:	461a      	mov	r2, r3
 8002338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	e0a7      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	2320      	movs	r3, #32
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e098      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8093 	bne.w	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d90f      	bls.n	8002392 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238e:	6093      	str	r3, [r2, #8]
 8002390:	e07e      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	0159      	lsls	r1, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d114      	bne.n	80023f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023dc:	461a      	mov	r2, r3
 80023de:	2101      	movs	r1, #1
 80023e0:	f002 ffe6 	bl	80053b0 <USB_EP0_OutStart>
 80023e4:	e006      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	441a      	add	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f005 fa9e 	bl	800793c <HAL_PCD_DataOutStageCallback>
 8002400:	e046      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d124      	bne.n	8002454 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	e032      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2320      	movs	r3, #32
 8002444:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f005 fa75 	bl	800793c <HAL_PCD_DataOutStageCallback>
 8002452:	e01d      	b.n	8002490 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x1b0>
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800247c:	461a      	mov	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	f002 ff96 	bl	80053b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 fa56 	bl	800793c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	4f54300a 	.word	0x4f54300a
 80024a0:	4f54310a 	.word	0x4f54310a

080024a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <PCD_EP_OutSetupPacket_int+0x88>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d90e      	bls.n	80024f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f005 fa0d 	bl	8007918 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <PCD_EP_OutSetupPacket_int+0x88>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d90c      	bls.n	8002520 <PCD_EP_OutSetupPacket_int+0x7c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002518:	461a      	mov	r2, r3
 800251a:	2101      	movs	r1, #1
 800251c:	f002 ff48 	bl	80053b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	4f54300a 	.word	0x4f54300a

08002530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	4613      	mov	r3, r2
 800253e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800254e:	883b      	ldrh	r3, [r7, #0]
 8002550:	0419      	lsls	r1, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	430a      	orrs	r2, r1
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
 800255c:	e028      	b.n	80025b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e00d      	b.n	800258e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3340      	adds	r3, #64	; 0x40
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	429a      	cmp	r2, r3
 8002596:	d3ec      	bcc.n	8002572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002598:	883b      	ldrh	r3, [r7, #0]
 800259a:	0418      	lsls	r0, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4302      	orrs	r2, r0
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fa46 	bl	8000b40 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fa42 	bl	8000b40 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe fa32 	bl	8000b40 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe fa2e 	bl	8000b40 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe f9e7 	bl	8000b40 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe f9e3 	bl	8000b40 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f9c6 	bl	8000b40 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe f9c2 	bl	8000b40 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe f9a6 	bl	8000b40 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe f9a2 	bl	8000b40 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe f98f 	bl	8000b40 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe f98b 	bl	8000b40 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe f94b 	bl	8000b40 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe f947 	bl	8000b40 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe f90c 	bl	8000b40 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe f908 	bl	8000b40 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe f8f6 	bl	8000b40 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe f8f2 	bl	8000b40 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe f8c6 	bl	8000b40 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe f8c2 	bl	8000b40 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe f89b 	bl	8000b40 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe f897 	bl	8000b40 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe f884 	bl	8000b40 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe f880 	bl	8000b40 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fd ffb2 	bl	8000b40 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fd ffae 	bl	8000b40 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd ff12 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08007f3c 	.word	0x08007f3c
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b090      	sub	sp, #64	; 0x40
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80a1 	bhi.w	8002e20 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e09b      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cec:	e09b      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf2:	e098      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	627a      	str	r2, [r7, #36]	; 0x24
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d20:	fb03 f201 	mul.w	r2, r3, r1
 8002d24:	2300      	movs	r3, #0
 8002d26:	fb00 f303 	mul.w	r3, r0, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d34:	460a      	mov	r2, r1
 8002d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	2200      	movs	r2, #0
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	61fa      	str	r2, [r7, #28]
 8002d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d4e:	f7fd fa49 	bl	80001e4 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4613      	mov	r3, r2
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5a:	e053      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	2200      	movs	r2, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	617a      	str	r2, [r7, #20]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d6e:	f04f 0b00 	mov.w	fp, #0
 8002d72:	4652      	mov	r2, sl
 8002d74:	465b      	mov	r3, fp
 8002d76:	f04f 0000 	mov.w	r0, #0
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	0159      	lsls	r1, r3, #5
 8002d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d84:	0150      	lsls	r0, r2, #5
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002da2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002da6:	ebb2 0408 	subs.w	r4, r2, r8
 8002daa:	eb63 0509 	sbc.w	r5, r3, r9
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	00eb      	lsls	r3, r5, #3
 8002db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dbc:	00e2      	lsls	r2, r4, #3
 8002dbe:	4614      	mov	r4, r2
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	eb14 030a 	adds.w	r3, r4, sl
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	eb45 030b 	adc.w	r3, r5, fp
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	028b      	lsls	r3, r1, #10
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de4:	4621      	mov	r1, r4
 8002de6:	028a      	lsls	r2, r1, #10
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	2200      	movs	r2, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	60fa      	str	r2, [r7, #12]
 8002df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df8:	f7fd f9f4 	bl	80001e4 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3740      	adds	r7, #64	; 0x40
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	017d7840 	.word	0x017d7840

08002e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e5c:	f7ff fff0 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	08007f4c 	.word	0x08007f4c

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e84:	f7ff ffdc 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0b5b      	lsrs	r3, r3, #13
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	08007f4c 	.word	0x08007f4c

08002ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07b      	b.n	8002fb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eca:	d009      	beq.n	8002ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fc9a 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0104 	and.w	r1, r3, #4
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0210 	and.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08c      	sub	sp, #48	; 0x30
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x26>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e18a      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x33c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe8:	f7fd fdaa 	bl	8000b40 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003006:	2b01      	cmp	r3, #1
 8003008:	d00f      	beq.n	800302a <HAL_SPI_TransmitReceive+0x70>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003010:	d107      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x68>
 800301a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003028:	e15b      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_SPI_TransmitReceive+0x82>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_SPI_TransmitReceive+0x82>
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003042:	e14e      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b04      	cmp	r3, #4
 800304e:	d003      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2205      	movs	r2, #5
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	887a      	ldrh	r2, [r7, #2]
 800306e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d007      	beq.n	80030ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	d178      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x10a>
 80030be:	8b7b      	ldrh	r3, [r7, #26]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d166      	bne.n	8003192 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e8:	e053      	b.n	8003192 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d11b      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x176>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x176>
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d113      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d119      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x1b8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d014      	beq.n	8003172 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	b292      	uxth	r2, r2
 8003154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	1c9a      	adds	r2, r3, #2
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800316e:	2301      	movs	r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003172:	f7fd fce5 	bl	8000b40 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800317e:	429a      	cmp	r2, r3
 8003180:	d807      	bhi.n	8003192 <HAL_SPI_TransmitReceive+0x1d8>
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d003      	beq.n	8003192 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003190:	e0a7      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1a6      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x130>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1a1      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x130>
 80031a6:	e07c      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x1fc>
 80031b0:	8b7b      	ldrh	r3, [r7, #26]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d16b      	bne.n	800328e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031dc:	e057      	b.n	800328e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11c      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x26c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d017      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x26c>
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d114      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d119      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x2ae>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d014      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003268:	f7fd fc6a 	bl	8000b40 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003274:	429a      	cmp	r2, r3
 8003276:	d803      	bhi.n	8003280 <HAL_SPI_TransmitReceive+0x2c6>
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <HAL_SPI_TransmitReceive+0x2cc>
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800328c:	e029      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1a2      	bne.n	80031de <HAL_SPI_TransmitReceive+0x224>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d19d      	bne.n	80031de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8b2 	bl	8003410 <SPI_EndRxTxTransaction>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032be:	e010      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	e000      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3730      	adds	r7, #48	; 0x30
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003310:	f7fd fc16 	bl	8000b40 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4413      	add	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003320:	f7fd fc0e 	bl	8000b40 <HAL_GetTick>
 8003324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	015b      	lsls	r3, r3, #5
 800332c:	0d1b      	lsrs	r3, r3, #20
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003336:	e054      	b.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d050      	beq.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003340:	f7fd fbfe 	bl	8000b40 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	429a      	cmp	r2, r3
 800334e:	d902      	bls.n	8003356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d13d      	bne.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336e:	d111      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003378:	d004      	beq.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d107      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339c:	d10f      	bne.n	80033be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e017      	b.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3b01      	subs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d19b      	bne.n	8003338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000000 	.word	0x20000000

08003410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <SPI_EndRxTxTransaction+0x7c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <SPI_EndRxTxTransaction+0x80>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0d5b      	lsrs	r3, r3, #21
 8003428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d112      	bne.n	8003462 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff5a 	bl	8003300 <SPI_WaitFlagStateUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3b01      	subs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d0f2      	beq.n	8003462 <SPI_EndRxTxTransaction+0x52>
 800347c:	e000      	b.n	8003480 <SPI_EndRxTxTransaction+0x70>
        break;
 800347e:	bf00      	nop
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000
 8003490:	165e9f81 	.word	0x165e9f81

08003494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e03f      	b.n	8003526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fa22 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f939 	bl	8003750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b08a      	sub	sp, #40	; 0x28
 8003532:	af02      	add	r7, sp, #8
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	f040 808c 	bne.w	8003668 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_UART_Receive+0x2e>
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e084      	b.n	800366a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_UART_Receive+0x40>
 800356a:	2302      	movs	r3, #2
 800356c:	e07d      	b.n	800366a <HAL_UART_Receive+0x13c>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2222      	movs	r2, #34	; 0x22
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358a:	f7fd fad9 	bl	8000b40 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d108      	bne.n	80035b8 <HAL_UART_Receive+0x8a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	e003      	b.n	80035c0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035c8:	e043      	b.n	8003652 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2120      	movs	r1, #32
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f84c 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e042      	b.n	800366a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	3302      	adds	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e01f      	b.n	8003644 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d007      	beq.n	800361e <HAL_UART_Receive+0xf0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_UART_Receive+0xfe>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e008      	b.n	800363e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003638:	b2da      	uxtb	r2, r3
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3301      	adds	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1b6      	bne.n	80035ca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b090      	sub	sp, #64	; 0x40
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003682:	e050      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d04c      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003692:	f7fd fa55 	bl	8000b40 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800369e:	429a      	cmp	r2, r3
 80036a0:	d241      	bcs.n	8003726 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c2:	637a      	str	r2, [r7, #52]	; 0x34
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e5      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3314      	adds	r3, #20
 80036dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	613b      	str	r3, [r7, #16]
   return(result);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036f6:	623a      	str	r2, [r7, #32]
 80036f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	69f9      	ldr	r1, [r7, #28]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	61bb      	str	r3, [r7, #24]
   return(result);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d09f      	beq.n	8003684 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3740      	adds	r7, #64	; 0x40
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b0c0      	sub	sp, #256	; 0x100
 8003756:	af00      	add	r7, sp, #0
 8003758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	ea40 0301 	orr.w	r3, r0, r1
 8003778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	431a      	orrs	r2, r3
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	431a      	orrs	r2, r3
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037a8:	f021 010c 	bic.w	r1, r1, #12
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037b6:	430b      	orrs	r3, r1
 80037b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	6999      	ldr	r1, [r3, #24]
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	ea40 0301 	orr.w	r3, r0, r1
 80037d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b8f      	ldr	r3, [pc, #572]	; (8003a1c <UART_SetConfig+0x2cc>)
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d005      	beq.n	80037f0 <UART_SetConfig+0xa0>
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <UART_SetConfig+0x2d0>)
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d104      	bne.n	80037fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7ff fb46 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80037f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037f8:	e003      	b.n	8003802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fa:	f7ff fb2d 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 80037fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380c:	f040 810c 	bne.w	8003a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003814:	2200      	movs	r2, #0
 8003816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800381a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800381e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003822:	4622      	mov	r2, r4
 8003824:	462b      	mov	r3, r5
 8003826:	1891      	adds	r1, r2, r2
 8003828:	65b9      	str	r1, [r7, #88]	; 0x58
 800382a:	415b      	adcs	r3, r3
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003832:	4621      	mov	r1, r4
 8003834:	eb12 0801 	adds.w	r8, r2, r1
 8003838:	4629      	mov	r1, r5
 800383a:	eb43 0901 	adc.w	r9, r3, r1
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800384e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003852:	4690      	mov	r8, r2
 8003854:	4699      	mov	r9, r3
 8003856:	4623      	mov	r3, r4
 8003858:	eb18 0303 	adds.w	r3, r8, r3
 800385c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003860:	462b      	mov	r3, r5
 8003862:	eb49 0303 	adc.w	r3, r9, r3
 8003866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800387a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800387e:	460b      	mov	r3, r1
 8003880:	18db      	adds	r3, r3, r3
 8003882:	653b      	str	r3, [r7, #80]	; 0x50
 8003884:	4613      	mov	r3, r2
 8003886:	eb42 0303 	adc.w	r3, r2, r3
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
 800388c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003894:	f7fc fca6 	bl	80001e4 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <UART_SetConfig+0x2d4>)
 800389e:	fba3 2302 	umull	r2, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	011c      	lsls	r4, r3, #4
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	64b9      	str	r1, [r7, #72]	; 0x48
 80038c0:	415b      	adcs	r3, r3
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038c8:	4641      	mov	r1, r8
 80038ca:	eb12 0a01 	adds.w	sl, r2, r1
 80038ce:	4649      	mov	r1, r9
 80038d0:	eb43 0b01 	adc.w	fp, r3, r1
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e8:	4692      	mov	sl, r2
 80038ea:	469b      	mov	fp, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	eb1a 0303 	adds.w	r3, sl, r3
 80038f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038f6:	464b      	mov	r3, r9
 80038f8:	eb4b 0303 	adc.w	r3, fp, r3
 80038fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800390c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003914:	460b      	mov	r3, r1
 8003916:	18db      	adds	r3, r3, r3
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
 800391a:	4613      	mov	r3, r2
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	647b      	str	r3, [r7, #68]	; 0x44
 8003922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800392a:	f7fc fc5b 	bl	80001e4 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4611      	mov	r1, r2
 8003934:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <UART_SetConfig+0x2d4>)
 8003936:	fba3 2301 	umull	r2, r3, r3, r1
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2264      	movs	r2, #100	; 0x64
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	1acb      	subs	r3, r1, r3
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <UART_SetConfig+0x2d4>)
 800394c:	fba3 2302 	umull	r2, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003958:	441c      	add	r4, r3
 800395a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	1891      	adds	r1, r2, r2
 8003972:	63b9      	str	r1, [r7, #56]	; 0x38
 8003974:	415b      	adcs	r3, r3
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800397c:	4641      	mov	r1, r8
 800397e:	1851      	adds	r1, r2, r1
 8003980:	6339      	str	r1, [r7, #48]	; 0x30
 8003982:	4649      	mov	r1, r9
 8003984:	414b      	adcs	r3, r1
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003994:	4659      	mov	r1, fp
 8003996:	00cb      	lsls	r3, r1, #3
 8003998:	4651      	mov	r1, sl
 800399a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800399e:	4651      	mov	r1, sl
 80039a0:	00ca      	lsls	r2, r1, #3
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	4642      	mov	r2, r8
 80039aa:	189b      	adds	r3, r3, r2
 80039ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b0:	464b      	mov	r3, r9
 80039b2:	460a      	mov	r2, r1
 80039b4:	eb42 0303 	adc.w	r3, r2, r3
 80039b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039d0:	460b      	mov	r3, r1
 80039d2:	18db      	adds	r3, r3, r3
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d6:	4613      	mov	r3, r2
 80039d8:	eb42 0303 	adc.w	r3, r2, r3
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039e6:	f7fc fbfd 	bl	80001e4 <__aeabi_uldivmod>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <UART_SetConfig+0x2d4>)
 80039f0:	fba3 1302 	umull	r1, r3, r3, r2
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	2164      	movs	r1, #100	; 0x64
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	3332      	adds	r3, #50	; 0x32
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <UART_SetConfig+0x2d4>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	f003 0207 	and.w	r2, r3, #7
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4422      	add	r2, r4
 8003a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a18:	e105      	b.n	8003c26 <UART_SetConfig+0x4d6>
 8003a1a:	bf00      	nop
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40011400 	.word	0x40011400
 8003a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	1891      	adds	r1, r2, r2
 8003a40:	6239      	str	r1, [r7, #32]
 8003a42:	415b      	adcs	r3, r3
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	1854      	adds	r4, r2, r1
 8003a4e:	4649      	mov	r1, r9
 8003a50:	eb43 0501 	adc.w	r5, r3, r1
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	00eb      	lsls	r3, r5, #3
 8003a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a62:	00e2      	lsls	r2, r4, #3
 8003a64:	4614      	mov	r4, r2
 8003a66:	461d      	mov	r5, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	18e3      	adds	r3, r4, r3
 8003a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a70:	464b      	mov	r3, r9
 8003a72:	eb45 0303 	adc.w	r3, r5, r3
 8003a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a96:	4629      	mov	r1, r5
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	008a      	lsls	r2, r1, #2
 8003aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003aa8:	f7fc fb9c 	bl	80001e4 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <UART_SetConfig+0x4e4>)
 8003ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	011c      	lsls	r4, r3, #4
 8003aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	61b9      	str	r1, [r7, #24]
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6139      	str	r1, [r7, #16]
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b10:	464b      	mov	r3, r9
 8003b12:	460a      	mov	r2, r1
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b34:	4649      	mov	r1, r9
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3e:	4641      	mov	r1, r8
 8003b40:	008a      	lsls	r2, r1, #2
 8003b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b46:	f7fc fb4d 	bl	80001e4 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <UART_SetConfig+0x4e4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <UART_SetConfig+0x4e4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6e:	441c      	add	r4, r3
 8003b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b74:	2200      	movs	r2, #0
 8003b76:	673b      	str	r3, [r7, #112]	; 0x70
 8003b78:	677a      	str	r2, [r7, #116]	; 0x74
 8003b7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b7e:	4642      	mov	r2, r8
 8003b80:	464b      	mov	r3, r9
 8003b82:	1891      	adds	r1, r2, r2
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	415b      	adcs	r3, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b8e:	4641      	mov	r1, r8
 8003b90:	1851      	adds	r1, r2, r1
 8003b92:	6039      	str	r1, [r7, #0]
 8003b94:	4649      	mov	r1, r9
 8003b96:	414b      	adcs	r3, r1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	00cb      	lsls	r3, r1, #3
 8003baa:	4651      	mov	r1, sl
 8003bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	00ca      	lsls	r2, r1, #3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4642      	mov	r2, r8
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd4:	667a      	str	r2, [r7, #100]	; 0x64
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003be2:	4649      	mov	r1, r9
 8003be4:	008b      	lsls	r3, r1, #2
 8003be6:	4641      	mov	r1, r8
 8003be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bec:	4641      	mov	r1, r8
 8003bee:	008a      	lsls	r2, r1, #2
 8003bf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bf4:	f7fc faf6 	bl	80001e4 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <UART_SetConfig+0x4e4>)
 8003bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2164      	movs	r1, #100	; 0x64
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	; 0x32
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <UART_SetConfig+0x4e4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4422      	add	r2, r4
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	bf00      	nop
 8003c28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	51eb851f 	.word	0x51eb851f

08003c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c38:	b084      	sub	sp, #16
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	f107 001c 	add.w	r0, r7, #28
 8003c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d122      	bne.n	8003c96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 fbee 	bl	800546c <USB_CoreReset>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	e01a      	b.n	8003ccc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f001 fbe2 	bl	800546c <USB_CoreReset>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cbe:	e005      	b.n	8003ccc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10b      	bne.n	8003cea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f043 0206 	orr.w	r2, r3, #6
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf6:	b004      	add	sp, #16
 8003cf8:	4770      	bx	lr
	...

08003cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d165      	bne.n	8003ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a41      	ldr	r2, [pc, #260]	; (8003e18 <USB_SetTurnaroundTime+0x11c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d906      	bls.n	8003d26 <USB_SetTurnaroundTime+0x2a>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <USB_SetTurnaroundTime+0x120>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d202      	bcs.n	8003d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d20:	230f      	movs	r3, #15
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e062      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <USB_SetTurnaroundTime+0x120>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d306      	bcc.n	8003d3c <USB_SetTurnaroundTime+0x40>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <USB_SetTurnaroundTime+0x124>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d202      	bcs.n	8003d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d36:	230e      	movs	r3, #14
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e057      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <USB_SetTurnaroundTime+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d306      	bcc.n	8003d52 <USB_SetTurnaroundTime+0x56>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <USB_SetTurnaroundTime+0x128>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d202      	bcs.n	8003d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d4c:	230d      	movs	r3, #13
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e04c      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <USB_SetTurnaroundTime+0x128>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d306      	bcc.n	8003d68 <USB_SetTurnaroundTime+0x6c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <USB_SetTurnaroundTime+0x12c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d802      	bhi.n	8003d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d62:	230c      	movs	r3, #12
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e041      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <USB_SetTurnaroundTime+0x12c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d906      	bls.n	8003d7e <USB_SetTurnaroundTime+0x82>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <USB_SetTurnaroundTime+0x130>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d802      	bhi.n	8003d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d78:	230b      	movs	r3, #11
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e036      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <USB_SetTurnaroundTime+0x130>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d906      	bls.n	8003d94 <USB_SetTurnaroundTime+0x98>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <USB_SetTurnaroundTime+0x134>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d802      	bhi.n	8003d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d8e:	230a      	movs	r3, #10
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e02b      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <USB_SetTurnaroundTime+0x134>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d906      	bls.n	8003daa <USB_SetTurnaroundTime+0xae>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <USB_SetTurnaroundTime+0x138>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d202      	bcs.n	8003daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003da4:	2309      	movs	r3, #9
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e020      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <USB_SetTurnaroundTime+0x138>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d306      	bcc.n	8003dc0 <USB_SetTurnaroundTime+0xc4>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <USB_SetTurnaroundTime+0x13c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d802      	bhi.n	8003dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dba:	2308      	movs	r3, #8
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e015      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <USB_SetTurnaroundTime+0x13c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d906      	bls.n	8003dd6 <USB_SetTurnaroundTime+0xda>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <USB_SetTurnaroundTime+0x140>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d202      	bcs.n	8003dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dd0:	2307      	movs	r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e00a      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e007      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003de2:	2309      	movs	r3, #9
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e001      	b.n	8003dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003de8:	2309      	movs	r3, #9
 8003dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	00d8acbf 	.word	0x00d8acbf
 8003e1c:	00e4e1c0 	.word	0x00e4e1c0
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	01067380 	.word	0x01067380
 8003e28:	011a499f 	.word	0x011a499f
 8003e2c:	01312cff 	.word	0x01312cff
 8003e30:	014ca43f 	.word	0x014ca43f
 8003e34:	016e3600 	.word	0x016e3600
 8003e38:	01a6ab1f 	.word	0x01a6ab1f
 8003e3c:	01e84800 	.word	0x01e84800

08003e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d115      	bne.n	8003ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7fc fe50 	bl	8000b58 <HAL_Delay>
      ms++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f001 fa45 	bl	800534e <USB_GetMode>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d01e      	beq.n	8003f08 <USB_SetCurrentMode+0x84>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b31      	cmp	r3, #49	; 0x31
 8003ece:	d9f0      	bls.n	8003eb2 <USB_SetCurrentMode+0x2e>
 8003ed0:	e01a      	b.n	8003f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d115      	bne.n	8003f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7fc fe37 	bl	8000b58 <HAL_Delay>
      ms++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f001 fa2c 	bl	800534e <USB_GetMode>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <USB_SetCurrentMode+0x84>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b31      	cmp	r3, #49	; 0x31
 8003f00:	d9f0      	bls.n	8003ee4 <USB_SetCurrentMode+0x60>
 8003f02:	e001      	b.n	8003f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e005      	b.n	8003f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b32      	cmp	r3, #50	; 0x32
 8003f0c:	d101      	bne.n	8003f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e009      	b.n	8003f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3340      	adds	r3, #64	; 0x40
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	2200      	movs	r2, #0
 8003f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0e      	cmp	r3, #14
 8003f54:	d9f2      	bls.n	8003f3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11c      	bne.n	8003f96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
 8003f94:	e00b      	b.n	8003fae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	461a      	mov	r2, r3
 8003fca:	680b      	ldr	r3, [r1, #0]
 8003fcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10c      	bne.n	8003fee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f965 	bl	80042ac <USB_SetDevSpeed>
 8003fe2:	e008      	b.n	8003ff6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f960 	bl	80042ac <USB_SetDevSpeed>
 8003fec:	e003      	b.n	8003ff6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fee:	2103      	movs	r1, #3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f95b 	bl	80042ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8f3 	bl	80041e4 <USB_FlushTxFifo>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f91f 	bl	800424c <USB_FlushRxFifo>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	461a      	mov	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e043      	b.n	80040ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004058:	d118      	bne.n	800408c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e013      	b.n	800409e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e008      	b.n	800409e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004098:	461a      	mov	r2, r3
 800409a:	2300      	movs	r3, #0
 800409c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	461a      	mov	r2, r3
 80040ac:	2300      	movs	r3, #0
 80040ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	461a      	mov	r2, r3
 80040be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3301      	adds	r3, #1
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3b7      	bcc.n	8004042 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e043      	b.n	8004160 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ee:	d118      	bne.n	8004122 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e013      	b.n	8004134 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	461a      	mov	r2, r3
 800411a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e008      	b.n	8004134 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3301      	adds	r3, #1
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3b7      	bcc.n	80040d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f043 0210 	orr.w	r2, r3, #16
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <USB_DevInit+0x2c4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d107      	bne.n	80041d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041dc:	b004      	add	sp, #16
 80041de:	4770      	bx	lr
 80041e0:	803c3800 	.word	0x803c3800

080041e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <USB_FlushTxFifo+0x64>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e01b      	b.n	800423c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	daf2      	bge.n	80041f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <USB_FlushTxFifo+0x64>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e006      	b.n	800423c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d0f0      	beq.n	800421c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	00030d40 	.word	0x00030d40

0800424c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <USB_FlushRxFifo+0x5c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e018      	b.n	800429c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	daf2      	bge.n	8004258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2210      	movs	r2, #16
 800427a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <USB_FlushRxFifo+0x5c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e006      	b.n	800429c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d0f0      	beq.n	800427c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	00030d40 	.word	0x00030d40

080042ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	68f9      	ldr	r1, [r7, #12]
 80042c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042de:	b480      	push	{r7}
 80042e0:	b087      	sub	sp, #28
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
 8004302:	e00a      	b.n	800431a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d002      	beq.n	8004310 <USB_GetDevSpeed+0x32>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d102      	bne.n	8004316 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004310:	2302      	movs	r3, #2
 8004312:	75fb      	strb	r3, [r7, #23]
 8004314:	e001      	b.n	800431a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004316:	230f      	movs	r3, #15
 8004318:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800431a:	7dfb      	ldrb	r3, [r7, #23]
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d13a      	bne.n	80043ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004362:	4313      	orrs	r3, r2
 8004364:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d155      	bne.n	8004428 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004398:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	059b      	lsls	r3, r3, #22
 800439e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043a0:	4313      	orrs	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e036      	b.n	8004428 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2101      	movs	r1, #1
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d8:	4313      	orrs	r3, r2
 80043da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11a      	bne.n	8004428 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	791b      	ldrb	r3, [r3, #4]
 800440c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800440e:	430b      	orrs	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d161      	bne.n	8004518 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446a:	d11f      	bne.n	80044ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800448a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	2101      	movs	r1, #1
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044cc:	4013      	ands	r3, r2
 80044ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f0:	4013      	ands	r3, r2
 80044f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0159      	lsls	r1, r3, #5
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	440b      	add	r3, r1
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	4619      	mov	r1, r3
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <USB_DeactivateEndpoint+0x1b0>)
 8004512:	4013      	ands	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
 8004516:	e060      	b.n	80045da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452e:	d11f      	bne.n	8004570 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	440a      	add	r2, r1
 8004546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800454a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800454e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800456e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	43db      	mvns	r3, r3
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004590:	4013      	ands	r3, r2
 8004592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	2101      	movs	r1, #1
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	43db      	mvns	r3, r3
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b4:	4013      	ands	r3, r2
 80045b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	0159      	lsls	r1, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	4619      	mov	r1, r3
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <USB_DeactivateEndpoint+0x1b4>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	ec337800 	.word	0xec337800
 80045ec:	eff37800 	.word	0xeff37800

080045f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 815c 	bne.w	80048ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d132      	bne.n	8004680 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800463c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800465c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004678:	0cdb      	lsrs	r3, r3, #19
 800467a:	04db      	lsls	r3, r3, #19
 800467c:	6113      	str	r3, [r2, #16]
 800467e:	e074      	b.n	800476a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469a:	0cdb      	lsrs	r3, r3, #19
 800469c:	04db      	lsls	r3, r3, #19
 800469e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	440b      	add	r3, r1
 80046dc:	1e59      	subs	r1, r3, #1
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046e8:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <USB_EPStartXfer+0x370>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	0148      	lsls	r0, r1, #5
 80046f0:	69f9      	ldr	r1, [r7, #28]
 80046f2:	4401      	add	r1, r0
 80046f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046f8:	4313      	orrs	r3, r2
 80046fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	0148      	lsls	r0, r1, #5
 8004716:	69f9      	ldr	r1, [r7, #28]
 8004718:	4401      	add	r1, r0
 800471a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d11f      	bne.n	800476a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004744:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004748:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	440a      	add	r2, r1
 8004760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004764:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004768:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d14b      	bne.n	8004808 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	791b      	ldrb	r3, [r3, #4]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d128      	bne.n	80047e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e00f      	b.n	80047e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e133      	b.n	8004a70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004826:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	791b      	ldrb	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d015      	beq.n	800485c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 811b 	beq.w	8004a70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004856:	4313      	orrs	r3, r2
 8004858:	634b      	str	r3, [r1, #52]	; 0x34
 800485a:	e109      	b.n	8004a70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d110      	bne.n	800488e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e00f      	b.n	80048ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6919      	ldr	r1, [r3, #16]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	b298      	uxth	r0, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4603      	mov	r3, r0
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fade 	bl	8004e84 <USB_WritePacket>
 80048c8:	e0d2      	b.n	8004a70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e4:	0cdb      	lsrs	r3, r3, #19
 80048e6:	04db      	lsls	r3, r3, #19
 80048e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800490c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d126      	bne.n	8004964 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	0148      	lsls	r0, r1, #5
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	4401      	add	r1, r0
 8004934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800495a:	6113      	str	r3, [r2, #16]
 800495c:	e03a      	b.n	80049d4 <USB_EPStartXfer+0x3e4>
 800495e:	bf00      	nop
 8004960:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4413      	add	r3, r2
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	8afa      	ldrh	r2, [r7, #22]
 8004980:	fb03 f202 	mul.w	r2, r3, r2
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	04d9      	lsls	r1, r3, #19
 800499a:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <USB_EPStartXfer+0x48c>)
 800499c:	400b      	ands	r3, r1
 800499e:	69b9      	ldr	r1, [r7, #24]
 80049a0:	0148      	lsls	r0, r1, #5
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	4401      	add	r1, r0
 80049a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049aa:	4313      	orrs	r3, r2
 80049ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	0148      	lsls	r0, r1, #5
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	4401      	add	r1, r0
 80049cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049d0:	4313      	orrs	r3, r2
 80049d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10d      	bne.n	80049f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6919      	ldr	r1, [r3, #16]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	460a      	mov	r2, r1
 80049f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	791b      	ldrb	r3, [r3, #4]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d128      	bne.n	8004a50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d110      	bne.n	8004a30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e00f      	b.n	8004a50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	1ff80000 	.word	0x1ff80000

08004a80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 80ce 	bne.w	8004c3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d132      	bne.n	8004b10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b08:	0cdb      	lsrs	r3, r3, #19
 8004b0a:	04db      	lsls	r3, r3, #19
 8004b0c:	6113      	str	r3, [r2, #16]
 8004b0e:	e04e      	b.n	8004bae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2a:	0cdb      	lsrs	r3, r3, #19
 8004b2c:	04db      	lsls	r3, r3, #19
 8004b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d903      	bls.n	8004b68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9e:	6939      	ldr	r1, [r7, #16]
 8004ba0:	0148      	lsls	r0, r1, #5
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	4401      	add	r1, r0
 8004ba6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004baa:	4313      	orrs	r3, r2
 8004bac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d11e      	bne.n	8004bf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e097      	b.n	8004d22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8083 	beq.w	8004d22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	634b      	str	r3, [r1, #52]	; 0x34
 8004c3c:	e071      	b.n	8004d22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c58:	0cdb      	lsrs	r3, r3, #19
 8004c5a:	04db      	lsls	r3, r3, #19
 8004c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd0:	6939      	ldr	r1, [r7, #16]
 8004cd2:	0148      	lsls	r0, r1, #5
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	4401      	add	r1, r0
 8004cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10d      	bne.n	8004d02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6919      	ldr	r1, [r3, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	460a      	mov	r2, r1
 8004d00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d14a      	bne.n	8004de4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d66:	f040 8086 	bne.w	8004e76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d902      	bls.n	8004dc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc6:	e056      	b.n	8004e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de0:	d0e7      	beq.n	8004db2 <USB_EPStopXfer+0x82>
 8004de2:	e048      	b.n	8004e76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfc:	d13b      	bne.n	8004e76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d902      	bls.n	8004e5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
          break;
 8004e5a:	e00c      	b.n	8004e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d0e7      	beq.n	8004e46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	461a      	mov	r2, r3
 8004e92:	460b      	mov	r3, r1
 8004e94:	71fb      	strb	r3, [r7, #7]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d123      	bne.n	8004ef2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004eaa:	88bb      	ldrh	r3, [r7, #4]
 8004eac:	3303      	adds	r3, #3
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e018      	b.n	8004eea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	031a      	lsls	r2, r3, #12
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3e2      	bcc.n	8004eb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3724      	adds	r7, #36	; 0x24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b08b      	sub	sp, #44	; 0x2c
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	e014      	b.n	8004f56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	3301      	adds	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	3301      	adds	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	3301      	adds	r3, #1
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3e6      	bcc.n	8004f2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f5e:	8bfb      	ldrh	r3, [r7, #30]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01e      	beq.n	8004fa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f107 0310 	add.w	r3, r7, #16
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	701a      	strb	r2, [r3, #0]
      i++;
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	3301      	adds	r3, #1
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f96:	8bfb      	ldrh	r3, [r7, #30]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ea      	bne.n	8004f78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	372c      	adds	r7, #44	; 0x2c
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d12c      	bne.n	8005026 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db12      	blt.n	8005004 <USB_EPSetStall+0x54>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00f      	beq.n	8005004 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005002:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e02b      	b.n	800507e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	db12      	blt.n	800505e <USB_EPSetStall+0xae>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00f      	beq.n	800505e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d128      	bne.n	80050fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d003      	beq.n	80050d8 <USB_EPClearStall+0x4c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	791b      	ldrb	r3, [r3, #4]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d138      	bne.n	800514a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e027      	b.n	800514a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005118:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d003      	beq.n	800512a <USB_EPClearStall+0x9e>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	791b      	ldrb	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d10f      	bne.n	800514a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800517a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d2:	f023 0302 	bic.w	r3, r3, #2
 80051d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005200:	f023 0303 	bic.w	r3, r3, #3
 8005204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0c1b      	lsrs	r3, r3, #16
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	b29b      	uxth	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052e4:	68bb      	ldr	r3, [r7, #8]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	01db      	lsls	r3, r3, #7
 8005324:	b2db      	uxtb	r3, r3
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005340:	68bb      	ldr	r3, [r7, #8]
}
 8005342:	4618      	mov	r0, r3
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0301 	and.w	r3, r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	460b      	mov	r3, r1
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	333c      	adds	r3, #60	; 0x3c
 80053c6:	3304      	adds	r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <USB_EP0_OutStart+0xb8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d90a      	bls.n	80053ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e4:	d101      	bne.n	80053ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e037      	b.n	800545a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f043 0318 	orr.w	r3, r3, #24
 800541c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005430:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005432:	7afb      	ldrb	r3, [r7, #11]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10f      	bne.n	8005458 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	4f54300a 	.word	0x4f54300a

0800546c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <USB_CoreReset+0x64>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e01b      	b.n	80054c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	daf2      	bge.n	8005478 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <USB_CoreReset+0x64>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e006      	b.n	80054c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d0f0      	beq.n	80054a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	00030d40 	.word	0x00030d40

080054d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054e4:	f002 fc8a 	bl	8007dfc <USBD_static_malloc>
 80054e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	32b0      	adds	r2, #176	; 0xb0
 80054fa:	2100      	movs	r1, #0
 80054fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005500:	2302      	movs	r3, #2
 8005502:	e0d4      	b.n	80056ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005504:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005508:	2100      	movs	r1, #0
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f002 fcde 	bl	8007ecc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	32b0      	adds	r2, #176	; 0xb0
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	32b0      	adds	r2, #176	; 0xb0
 800552a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7c1b      	ldrb	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d138      	bne.n	80055ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800553c:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <USBD_CDC_Init+0x1e4>)
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005544:	2202      	movs	r2, #2
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f002 fb35 	bl	8007bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800554c:	4b5a      	ldr	r3, [pc, #360]	; (80056b8 <USBD_CDC_Init+0x1e4>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	2201      	movs	r2, #1
 8005564:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005566:	4b55      	ldr	r3, [pc, #340]	; (80056bc <USBD_CDC_Init+0x1e8>)
 8005568:	7819      	ldrb	r1, [r3, #0]
 800556a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800556e:	2202      	movs	r2, #2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f002 fb20 	bl	8007bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005576:	4b51      	ldr	r3, [pc, #324]	; (80056bc <USBD_CDC_Init+0x1e8>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800558e:	2201      	movs	r2, #1
 8005590:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005592:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <USBD_CDC_Init+0x1ec>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3326      	adds	r3, #38	; 0x26
 80055a8:	2210      	movs	r2, #16
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e035      	b.n	800561a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055ae:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <USBD_CDC_Init+0x1e4>)
 80055b0:	7819      	ldrb	r1, [r3, #0]
 80055b2:	2340      	movs	r3, #64	; 0x40
 80055b4:	2202      	movs	r2, #2
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f002 fafd 	bl	8007bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055bc:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <USBD_CDC_Init+0x1e4>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	3324      	adds	r3, #36	; 0x24
 80055d2:	2201      	movs	r2, #1
 80055d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055d6:	4b39      	ldr	r3, [pc, #228]	; (80056bc <USBD_CDC_Init+0x1e8>)
 80055d8:	7819      	ldrb	r1, [r3, #0]
 80055da:	2340      	movs	r3, #64	; 0x40
 80055dc:	2202      	movs	r2, #2
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 fae9 	bl	8007bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <USBD_CDC_Init+0x1e8>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055fc:	2201      	movs	r2, #1
 80055fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005600:	4b2f      	ldr	r3, [pc, #188]	; (80056c0 <USBD_CDC_Init+0x1ec>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3326      	adds	r3, #38	; 0x26
 8005616:	2210      	movs	r2, #16
 8005618:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800561a:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <USBD_CDC_Init+0x1ec>)
 800561c:	7819      	ldrb	r1, [r3, #0]
 800561e:	2308      	movs	r3, #8
 8005620:	2203      	movs	r2, #3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f002 fac7 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <USBD_CDC_Init+0x1ec>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	2201      	movs	r2, #1
 8005640:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	33b0      	adds	r3, #176	; 0xb0
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005678:	2302      	movs	r3, #2
 800567a:	e018      	b.n	80056ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7c1b      	ldrb	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <USBD_CDC_Init+0x1e8>)
 8005686:	7819      	ldrb	r1, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800568e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f002 fb7e 	bl	8007d94 <USBD_LL_PrepareReceive>
 8005698:	e008      	b.n	80056ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <USBD_CDC_Init+0x1e8>)
 800569c:	7819      	ldrb	r1, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f002 fb74 	bl	8007d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000093 	.word	0x20000093
 80056bc:	20000094 	.word	0x20000094
 80056c0:	20000095 	.word	0x20000095

080056c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056d0:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <USBD_CDC_DeInit+0xf8>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f002 fa93 	bl	8007c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056dc:	4b37      	ldr	r3, [pc, #220]	; (80057bc <USBD_CDC_DeInit+0xf8>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	3324      	adds	r3, #36	; 0x24
 80056f2:	2200      	movs	r2, #0
 80056f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <USBD_CDC_DeInit+0xfc>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f002 fa80 	bl	8007c02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <USBD_CDC_DeInit+0xfc>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800571a:	2200      	movs	r2, #0
 800571c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800571e:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <USBD_CDC_DeInit+0x100>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 fa6c 	bl	8007c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800572a:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <USBD_CDC_DeInit+0x100>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	2200      	movs	r2, #0
 8005742:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005744:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <USBD_CDC_DeInit+0x100>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	3326      	adds	r3, #38	; 0x26
 800575a:	2200      	movs	r2, #0
 800575c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	32b0      	adds	r2, #176	; 0xb0
 8005768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01f      	beq.n	80057b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	33b0      	adds	r3, #176	; 0xb0
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	32b0      	adds	r2, #176	; 0xb0
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	4618      	mov	r0, r3
 8005794:	f002 fb40 	bl	8007e18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	32b0      	adds	r2, #176	; 0xb0
 80057a2:	2100      	movs	r1, #0
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000093 	.word	0x20000093
 80057c0:	20000094 	.word	0x20000094
 80057c4:	20000095 	.word	0x20000095

080057c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	32b0      	adds	r2, #176	; 0xb0
 80057dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0bf      	b.n	8005978 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005800:	2b00      	cmp	r3, #0
 8005802:	d050      	beq.n	80058a6 <USBD_CDC_Setup+0xde>
 8005804:	2b20      	cmp	r3, #32
 8005806:	f040 80af 	bne.w	8005968 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	88db      	ldrh	r3, [r3, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d03a      	beq.n	8005888 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b25b      	sxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	da1b      	bge.n	8005854 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	33b0      	adds	r3, #176	; 0xb0
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005832:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	88d2      	ldrh	r2, [r2, #6]
 8005838:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	88db      	ldrh	r3, [r3, #6]
 800583e:	2b07      	cmp	r3, #7
 8005840:	bf28      	it	cs
 8005842:	2307      	movcs	r3, #7
 8005844:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	89fa      	ldrh	r2, [r7, #14]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fd89 	bl	8007364 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005852:	e090      	b.n	8005976 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	785a      	ldrb	r2, [r3, #1]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	88db      	ldrh	r3, [r3, #6]
 8005862:	2b3f      	cmp	r3, #63	; 0x3f
 8005864:	d803      	bhi.n	800586e <USBD_CDC_Setup+0xa6>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	88db      	ldrh	r3, [r3, #6]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	e000      	b.n	8005870 <USBD_CDC_Setup+0xa8>
 800586e:	2240      	movs	r2, #64	; 0x40
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800587e:	461a      	mov	r2, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fd9b 	bl	80073bc <USBD_CtlPrepareRx>
      break;
 8005886:	e076      	b.n	8005976 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	33b0      	adds	r3, #176	; 0xb0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	7850      	ldrb	r0, [r2, #1]
 800589e:	2200      	movs	r2, #0
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	4798      	blx	r3
      break;
 80058a4:	e067      	b.n	8005976 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b0b      	cmp	r3, #11
 80058ac:	d851      	bhi.n	8005952 <USBD_CDC_Setup+0x18a>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <USBD_CDC_Setup+0xec>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058e5 	.word	0x080058e5
 80058b8:	08005961 	.word	0x08005961
 80058bc:	08005953 	.word	0x08005953
 80058c0:	08005953 	.word	0x08005953
 80058c4:	08005953 	.word	0x08005953
 80058c8:	08005953 	.word	0x08005953
 80058cc:	08005953 	.word	0x08005953
 80058d0:	08005953 	.word	0x08005953
 80058d4:	08005953 	.word	0x08005953
 80058d8:	08005953 	.word	0x08005953
 80058dc:	0800590f 	.word	0x0800590f
 80058e0:	08005939 	.word	0x08005939
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058f0:	f107 030a 	add.w	r3, r7, #10
 80058f4:	2202      	movs	r2, #2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fd33 	bl	8007364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058fe:	e032      	b.n	8005966 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fcbd 	bl	8007282 <USBD_CtlError>
            ret = USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	75fb      	strb	r3, [r7, #23]
          break;
 800590c:	e02b      	b.n	8005966 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d107      	bne.n	800592a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800591a:	f107 030d 	add.w	r3, r7, #13
 800591e:	2201      	movs	r2, #1
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 fd1e 	bl	8007364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005928:	e01d      	b.n	8005966 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fca8 	bl	8007282 <USBD_CtlError>
            ret = USBD_FAIL;
 8005932:	2303      	movs	r3, #3
 8005934:	75fb      	strb	r3, [r7, #23]
          break;
 8005936:	e016      	b.n	8005966 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b03      	cmp	r3, #3
 8005942:	d00f      	beq.n	8005964 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fc9b 	bl	8007282 <USBD_CtlError>
            ret = USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005950:	e008      	b.n	8005964 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fc94 	bl	8007282 <USBD_CtlError>
          ret = USBD_FAIL;
 800595a:	2303      	movs	r3, #3
 800595c:	75fb      	strb	r3, [r7, #23]
          break;
 800595e:	e002      	b.n	8005966 <USBD_CDC_Setup+0x19e>
          break;
 8005960:	bf00      	nop
 8005962:	e008      	b.n	8005976 <USBD_CDC_Setup+0x1ae>
          break;
 8005964:	bf00      	nop
      }
      break;
 8005966:	e006      	b.n	8005976 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fc89 	bl	8007282 <USBD_CtlError>
      ret = USBD_FAIL;
 8005970:	2303      	movs	r3, #3
 8005972:	75fb      	strb	r3, [r7, #23]
      break;
 8005974:	bf00      	nop
  }

  return (uint8_t)ret;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005992:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	32b0      	adds	r2, #176	; 0xb0
 800599e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e065      	b.n	8005a76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	32b0      	adds	r2, #176	; 0xb0
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3318      	adds	r3, #24
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02f      	beq.n	8005a34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3318      	adds	r3, #24
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 010f 	and.w	r1, r3, #15
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	460b      	mov	r3, r1
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4403      	add	r3, r0
 80059fc:	3348      	adds	r3, #72	; 0x48
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d112      	bne.n	8005a34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3318      	adds	r3, #24
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a26:	78f9      	ldrb	r1, [r7, #3]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 f990 	bl	8007d52 <USBD_LL_Transmit>
 8005a32:	e01f      	b.n	8005a74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	33b0      	adds	r3, #176	; 0xb0
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d010      	beq.n	8005a74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	33b0      	adds	r3, #176	; 0xb0
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	32b0      	adds	r2, #176	; 0xb0
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32b0      	adds	r2, #176	; 0xb0
 8005aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e01a      	b.n	8005ae6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 f98e 	bl	8007dd6 <USBD_LL_GetRxDataSize>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	33b0      	adds	r3, #176	; 0xb0
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	32b0      	adds	r2, #176	; 0xb0
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e025      	b.n	8005b5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	33b0      	adds	r3, #176	; 0xb0
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <USBD_CDC_EP0_RxReady+0x6c>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b2a:	2bff      	cmp	r3, #255	; 0xff
 8005b2c:	d015      	beq.n	8005b5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	33b0      	adds	r3, #176	; 0xb0
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b6c:	2182      	movs	r1, #130	; 0x82
 8005b6e:	4818      	ldr	r0, [pc, #96]	; (8005bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b70:	f000 fd4f 	bl	8006612 <USBD_GetEpDesc>
 8005b74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b76:	2101      	movs	r1, #1
 8005b78:	4815      	ldr	r0, [pc, #84]	; (8005bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b7a:	f000 fd4a 	bl	8006612 <USBD_GetEpDesc>
 8005b7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b80:	2181      	movs	r1, #129	; 0x81
 8005b82:	4813      	ldr	r0, [pc, #76]	; (8005bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b84:	f000 fd45 	bl	8006612 <USBD_GetEpDesc>
 8005b88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2210      	movs	r2, #16
 8005b94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d006      	beq.n	8005baa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba4:	711a      	strb	r2, [r3, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb8:	711a      	strb	r2, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2243      	movs	r2, #67	; 0x43
 8005bc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000050 	.word	0x20000050

08005bd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bdc:	2182      	movs	r1, #130	; 0x82
 8005bde:	4818      	ldr	r0, [pc, #96]	; (8005c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005be0:	f000 fd17 	bl	8006612 <USBD_GetEpDesc>
 8005be4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005be6:	2101      	movs	r1, #1
 8005be8:	4815      	ldr	r0, [pc, #84]	; (8005c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bea:	f000 fd12 	bl	8006612 <USBD_GetEpDesc>
 8005bee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bf0:	2181      	movs	r1, #129	; 0x81
 8005bf2:	4813      	ldr	r0, [pc, #76]	; (8005c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bf4:	f000 fd0d 	bl	8006612 <USBD_GetEpDesc>
 8005bf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2210      	movs	r2, #16
 8005c04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d006      	beq.n	8005c1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	711a      	strb	r2, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f042 0202 	orr.w	r2, r2, #2
 8005c18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	711a      	strb	r2, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f042 0202 	orr.w	r2, r2, #2
 8005c2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2243      	movs	r2, #67	; 0x43
 8005c32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000050 	.word	0x20000050

08005c44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c4c:	2182      	movs	r1, #130	; 0x82
 8005c4e:	4818      	ldr	r0, [pc, #96]	; (8005cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c50:	f000 fcdf 	bl	8006612 <USBD_GetEpDesc>
 8005c54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c56:	2101      	movs	r1, #1
 8005c58:	4815      	ldr	r0, [pc, #84]	; (8005cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c5a:	f000 fcda 	bl	8006612 <USBD_GetEpDesc>
 8005c5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c60:	2181      	movs	r1, #129	; 0x81
 8005c62:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c64:	f000 fcd5 	bl	8006612 <USBD_GetEpDesc>
 8005c68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2210      	movs	r2, #16
 8005c74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c84:	711a      	strb	r2, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c98:	711a      	strb	r2, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2243      	movs	r2, #67	; 0x43
 8005ca2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000050 	.word	0x20000050

08005cb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cc2:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e009      	b.n	8005cfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	33b0      	adds	r3, #176	; 0xb0
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	32b0      	adds	r2, #176	; 0xb0
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e008      	b.n	8005d40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	32b0      	adds	r2, #176	; 0xb0
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e004      	b.n	8005d7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	32b0      	adds	r2, #176	; 0xb0
 8005d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	; 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e025      	b.n	8005e06 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11f      	bne.n	8005e04 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <USBD_CDC_TransmitPacket+0x88>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f003 020f 	and.w	r2, r3, #15
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4403      	add	r3, r0
 8005de6:	3318      	adds	r3, #24
 8005de8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <USBD_CDC_TransmitPacket+0x88>)
 8005dec:	7819      	ldrb	r1, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 ffa9 	bl	8007d52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000093 	.word	0x20000093

08005e14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	32b0      	adds	r2, #176	; 0xb0
 8005e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	32b0      	adds	r2, #176	; 0xb0
 8005e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e018      	b.n	8005e74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7c1b      	ldrb	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <USBD_CDC_ReceivePacket+0x68>)
 8005e4c:	7819      	ldrb	r1, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 ff9b 	bl	8007d94 <USBD_LL_PrepareReceive>
 8005e5e:	e008      	b.n	8005e72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <USBD_CDC_ReceivePacket+0x68>)
 8005e62:	7819      	ldrb	r1, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e6a:	2340      	movs	r3, #64	; 0x40
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 ff91 	bl	8007d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000094 	.word	0x20000094

08005e80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e01f      	b.n	8005ed8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	79fa      	ldrb	r2, [r7, #7]
 8005eca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 fe0b 	bl	8007ae8 <USBD_LL_Init>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e025      	b.n	8005f44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32ae      	adds	r2, #174	; 0xae
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	f107 020e 	add.w	r2, r7, #14
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fe13 	bl	8007b80 <USBD_LL_Start>
 8005f5a:	4603      	mov	r3, r0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 f908 	bl	800720e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2b02      	cmp	r3, #2
 8006020:	d01a      	beq.n	8006058 <USBD_LL_SetupStage+0x72>
 8006022:	2b02      	cmp	r3, #2
 8006024:	d822      	bhi.n	800606c <USBD_LL_SetupStage+0x86>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <USBD_LL_SetupStage+0x4a>
 800602a:	2b01      	cmp	r3, #1
 800602c:	d00a      	beq.n	8006044 <USBD_LL_SetupStage+0x5e>
 800602e:	e01d      	b.n	800606c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb5f 	bl	80066fc <USBD_StdDevReq>
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]
      break;
 8006042:	e020      	b.n	8006086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fbc7 	bl	80067e0 <USBD_StdItfReq>
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e016      	b.n	8006086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fc29 	bl	80068b8 <USBD_StdEPReq>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
      break;
 800606a:	e00c      	b.n	8006086 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fde0 	bl	8007c40 <USBD_LL_StallEP>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	bf00      	nop
  }

  return ret;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	460b      	mov	r3, r1
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d16e      	bne.n	8006186 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	f040 8098 	bne.w	80061ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d913      	bls.n	80060f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4293      	cmp	r3, r2
 80060e0:	bf28      	it	cs
 80060e2:	4613      	movcs	r3, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 f984 	bl	80073f6 <USBD_CtlContinueRx>
 80060ee:	e07d      	b.n	80061ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d014      	beq.n	8006128 <USBD_LL_DataOutStage+0x98>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d81d      	bhi.n	800613e <USBD_LL_DataOutStage+0xae>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <USBD_LL_DataOutStage+0x7c>
 8006106:	2b01      	cmp	r3, #1
 8006108:	d003      	beq.n	8006112 <USBD_LL_DataOutStage+0x82>
 800610a:	e018      	b.n	800613e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	75bb      	strb	r3, [r7, #22]
            break;
 8006110:	e018      	b.n	8006144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006118:	b2db      	uxtb	r3, r3
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fa5e 	bl	80065de <USBD_CoreFindIF>
 8006122:	4603      	mov	r3, r0
 8006124:	75bb      	strb	r3, [r7, #22]
            break;
 8006126:	e00d      	b.n	8006144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800612e:	b2db      	uxtb	r3, r3
 8006130:	4619      	mov	r1, r3
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fa60 	bl	80065f8 <USBD_CoreFindEP>
 8006138:	4603      	mov	r3, r0
 800613a:	75bb      	strb	r3, [r7, #22]
            break;
 800613c:	e002      	b.n	8006144 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	75bb      	strb	r3, [r7, #22]
            break;
 8006142:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006144:	7dbb      	ldrb	r3, [r7, #22]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d119      	bne.n	800617e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d113      	bne.n	800617e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006156:	7dba      	ldrb	r2, [r7, #22]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	32ae      	adds	r2, #174	; 0xae
 800615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800616e:	7dba      	ldrb	r2, [r7, #22]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	32ae      	adds	r2, #174	; 0xae
 8006174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f001 f94a 	bl	8007418 <USBD_CtlSendStatus>
 8006184:	e032      	b.n	80061ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fa31 	bl	80065f8 <USBD_CoreFindEP>
 8006196:	4603      	mov	r3, r0
 8006198:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800619a:	7dbb      	ldrb	r3, [r7, #22]
 800619c:	2bff      	cmp	r3, #255	; 0xff
 800619e:	d025      	beq.n	80061ec <USBD_LL_DataOutStage+0x15c>
 80061a0:	7dbb      	ldrb	r3, [r7, #22]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d122      	bne.n	80061ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d117      	bne.n	80061e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061b2:	7dba      	ldrb	r2, [r7, #22]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	32ae      	adds	r2, #174	; 0xae
 80061b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00f      	beq.n	80061e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061c2:	7dba      	ldrb	r2, [r7, #22]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061ca:	7dba      	ldrb	r2, [r7, #22]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	32ae      	adds	r2, #174	; 0xae
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	7afa      	ldrb	r2, [r7, #11]
 80061d8:	4611      	mov	r1, r2
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	4798      	blx	r3
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	e000      	b.n	80061ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	460b      	mov	r3, r1
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d16f      	bne.n	80062ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3314      	adds	r3, #20
 800620e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006216:	2b02      	cmp	r3, #2
 8006218:	d15a      	bne.n	80062d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	429a      	cmp	r2, r3
 8006224:	d914      	bls.n	8006250 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	461a      	mov	r2, r3
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 f8ac 	bl	800739a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006242:	2300      	movs	r3, #0
 8006244:	2200      	movs	r2, #0
 8006246:	2100      	movs	r1, #0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 fda3 	bl	8007d94 <USBD_LL_PrepareReceive>
 800624e:	e03f      	b.n	80062d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d11c      	bne.n	8006296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006264:	429a      	cmp	r2, r3
 8006266:	d316      	bcc.n	8006296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006272:	429a      	cmp	r2, r3
 8006274:	d20f      	bcs.n	8006296 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006276:	2200      	movs	r2, #0
 8006278:	2100      	movs	r1, #0
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f001 f88d 	bl	800739a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006288:	2300      	movs	r3, #0
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f001 fd80 	bl	8007d94 <USBD_LL_PrepareReceive>
 8006294:	e01c      	b.n	80062d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d10f      	bne.n	80062c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 fcbb 	bl	8007c40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 f8b7 	bl	800743e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d03a      	beq.n	8006350 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fe42 	bl	8005f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062e8:	e032      	b.n	8006350 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4619      	mov	r1, r3
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f97f 	bl	80065f8 <USBD_CoreFindEP>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	2bff      	cmp	r3, #255	; 0xff
 8006302:	d025      	beq.n	8006350 <USBD_LL_DataInStage+0x15a>
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d122      	bne.n	8006350 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d11c      	bne.n	8006350 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006316:	7dfa      	ldrb	r2, [r7, #23]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	32ae      	adds	r2, #174	; 0xae
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d014      	beq.n	8006350 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006326:	7dfa      	ldrb	r2, [r7, #23]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800632e:	7dfa      	ldrb	r2, [r7, #23]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	32ae      	adds	r2, #174	; 0xae
 8006334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	7afa      	ldrb	r2, [r7, #11]
 800633c:	4611      	mov	r1, r2
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	4798      	blx	r3
 8006342:	4603      	mov	r3, r0
 8006344:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006346:	7dbb      	ldrb	r3, [r7, #22]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800634c:	7dbb      	ldrb	r3, [r7, #22]
 800634e:	e000      	b.n	8006352 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d014      	beq.n	80063c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6852      	ldr	r2, [r2, #4]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fbf5 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2240      	movs	r2, #64	; 0x40
 80063d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	2200      	movs	r2, #0
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fbe7 	bl	8007bb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2240      	movs	r2, #64	; 0x40
 80063f2:	621a      	str	r2, [r3, #32]

  return ret;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2da      	uxtb	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b04      	cmp	r3, #4
 800645c:	d106      	bne.n	800646c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006464:	b2da      	uxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d110      	bne.n	80064b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	32ae      	adds	r2, #174	; 0xae
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064d8:	2303      	movs	r3, #3
 80064da:	e01c      	b.n	8006516 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d115      	bne.n	8006514 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32ae      	adds	r2, #174	; 0xae
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32ae      	adds	r2, #174	; 0xae
 8006506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	4611      	mov	r1, r2
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	32ae      	adds	r2, #174	; 0xae
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	e01c      	b.n	800657a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b03      	cmp	r3, #3
 800654a:	d115      	bne.n	8006578 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	32ae      	adds	r2, #174	; 0xae
 8006556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	; 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	4611      	mov	r1, r2
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00e      	beq.n	80065d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6852      	ldr	r2, [r2, #4]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	4611      	mov	r1, r2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006604:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	885b      	ldrh	r3, [r3, #2]
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	429a      	cmp	r2, r3
 8006638:	d920      	bls.n	800667c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006642:	e013      	b.n	800666c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006644:	f107 030a 	add.w	r3, r7, #10
 8006648:	4619      	mov	r1, r3
 800664a:	6978      	ldr	r0, [r7, #20]
 800664c:	f000 f81b 	bl	8006686 <USBD_GetNextDesc>
 8006650:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d108      	bne.n	800666c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	789b      	ldrb	r3, [r3, #2]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	429a      	cmp	r2, r3
 8006666:	d008      	beq.n	800667a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	b29a      	uxth	r2, r3
 8006672:	897b      	ldrh	r3, [r7, #10]
 8006674:	429a      	cmp	r2, r3
 8006676:	d8e5      	bhi.n	8006644 <USBD_GetEpDesc+0x32>
 8006678:	e000      	b.n	800667c <USBD_GetEpDesc+0x6a>
          break;
 800667a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800667c:	693b      	ldr	r3, [r7, #16]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	4413      	add	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066b2:	68fb      	ldr	r3, [r7, #12]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	3301      	adds	r3, #1
 80066d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066de:	8a3b      	ldrh	r3, [r7, #16]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	b21a      	sxth	r2, r3
 80066e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	b21b      	sxth	r3, r3
 80066ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066ee:	89fb      	ldrh	r3, [r7, #14]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d005      	beq.n	8006722 <USBD_StdDevReq+0x26>
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d857      	bhi.n	80067ca <USBD_StdDevReq+0xce>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00f      	beq.n	800673e <USBD_StdDevReq+0x42>
 800671e:	2b20      	cmp	r3, #32
 8006720:	d153      	bne.n	80067ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	32ae      	adds	r2, #174	; 0xae
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e04a      	b.n	80067d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b09      	cmp	r3, #9
 8006744:	d83b      	bhi.n	80067be <USBD_StdDevReq+0xc2>
 8006746:	a201      	add	r2, pc, #4	; (adr r2, 800674c <USBD_StdDevReq+0x50>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	080067a1 	.word	0x080067a1
 8006750:	080067b5 	.word	0x080067b5
 8006754:	080067bf 	.word	0x080067bf
 8006758:	080067ab 	.word	0x080067ab
 800675c:	080067bf 	.word	0x080067bf
 8006760:	0800677f 	.word	0x0800677f
 8006764:	08006775 	.word	0x08006775
 8006768:	080067bf 	.word	0x080067bf
 800676c:	08006797 	.word	0x08006797
 8006770:	08006789 	.word	0x08006789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa3c 	bl	8006bf4 <USBD_GetDescriptor>
          break;
 800677c:	e024      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fba1 	bl	8006ec8 <USBD_SetAddress>
          break;
 8006786:	e01f      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fbe0 	bl	8006f50 <USBD_SetConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
          break;
 8006794:	e018      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fc83 	bl	80070a4 <USBD_GetConfig>
          break;
 800679e:	e013      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fcb4 	bl	8007110 <USBD_GetStatus>
          break;
 80067a8:	e00e      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fce3 	bl	8007178 <USBD_SetFeature>
          break;
 80067b2:	e009      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd07 	bl	80071ca <USBD_ClrFeature>
          break;
 80067bc:	e004      	b.n	80067c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fd5e 	bl	8007282 <USBD_CtlError>
          break;
 80067c6:	bf00      	nop
      }
      break;
 80067c8:	e004      	b.n	80067d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fd58 	bl	8007282 <USBD_CtlError>
      break;
 80067d2:	bf00      	nop
  }

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop

080067e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d005      	beq.n	8006806 <USBD_StdItfReq+0x26>
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d852      	bhi.n	80068a4 <USBD_StdItfReq+0xc4>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <USBD_StdItfReq+0x26>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d14e      	bne.n	80068a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	2b02      	cmp	r3, #2
 8006812:	d840      	bhi.n	8006896 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	889b      	ldrh	r3, [r3, #4]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	d836      	bhi.n	800688c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	889b      	ldrh	r3, [r3, #4]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff fed9 	bl	80065de <USBD_CoreFindIF>
 800682c:	4603      	mov	r3, r0
 800682e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2bff      	cmp	r3, #255	; 0xff
 8006834:	d01d      	beq.n	8006872 <USBD_StdItfReq+0x92>
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11a      	bne.n	8006872 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800683c:	7bba      	ldrb	r2, [r7, #14]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32ae      	adds	r2, #174	; 0xae
 8006842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00f      	beq.n	800686c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800684c:	7bba      	ldrb	r2, [r7, #14]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006854:	7bba      	ldrb	r2, [r7, #14]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32ae      	adds	r2, #174	; 0xae
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800686a:	e004      	b.n	8006876 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800686c:	2303      	movs	r3, #3
 800686e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006870:	e001      	b.n	8006876 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006872:	2303      	movs	r3, #3
 8006874:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	88db      	ldrh	r3, [r3, #6]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d110      	bne.n	80068a0 <USBD_StdItfReq+0xc0>
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10d      	bne.n	80068a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fdc7 	bl	8007418 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800688a:	e009      	b.n	80068a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fcf7 	bl	8007282 <USBD_CtlError>
          break;
 8006894:	e004      	b.n	80068a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fcf2 	bl	8007282 <USBD_CtlError>
          break;
 800689e:	e000      	b.n	80068a2 <USBD_StdItfReq+0xc2>
          break;
 80068a0:	bf00      	nop
      }
      break;
 80068a2:	e004      	b.n	80068ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fceb 	bl	8007282 <USBD_CtlError>
      break;
 80068ac:	bf00      	nop
  }

  return ret;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	889b      	ldrh	r3, [r3, #4]
 80068ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d007      	beq.n	80068e8 <USBD_StdEPReq+0x30>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	f200 817f 	bhi.w	8006bdc <USBD_StdEPReq+0x324>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02a      	beq.n	8006938 <USBD_StdEPReq+0x80>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	f040 817a 	bne.w	8006bdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fe83 	bl	80065f8 <USBD_CoreFindEP>
 80068f2:	4603      	mov	r3, r0
 80068f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068f6:	7b7b      	ldrb	r3, [r7, #13]
 80068f8:	2bff      	cmp	r3, #255	; 0xff
 80068fa:	f000 8174 	beq.w	8006be6 <USBD_StdEPReq+0x32e>
 80068fe:	7b7b      	ldrb	r3, [r7, #13]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8170 	bne.w	8006be6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006906:	7b7a      	ldrb	r2, [r7, #13]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800690e:	7b7a      	ldrb	r2, [r7, #13]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32ae      	adds	r2, #174	; 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8163 	beq.w	8006be6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	; 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006936:	e156      	b.n	8006be6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d008      	beq.n	8006952 <USBD_StdEPReq+0x9a>
 8006940:	2b03      	cmp	r3, #3
 8006942:	f300 8145 	bgt.w	8006bd0 <USBD_StdEPReq+0x318>
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 809b 	beq.w	8006a82 <USBD_StdEPReq+0x1ca>
 800694c:	2b01      	cmp	r3, #1
 800694e:	d03c      	beq.n	80069ca <USBD_StdEPReq+0x112>
 8006950:	e13e      	b.n	8006bd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d002      	beq.n	8006964 <USBD_StdEPReq+0xac>
 800695e:	2b03      	cmp	r3, #3
 8006960:	d016      	beq.n	8006990 <USBD_StdEPReq+0xd8>
 8006962:	e02c      	b.n	80069be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <USBD_StdEPReq+0xce>
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d00a      	beq.n	8006986 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f963 	bl	8007c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800697a:	2180      	movs	r1, #128	; 0x80
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f95f 	bl	8007c40 <USBD_LL_StallEP>
 8006982:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006984:	e020      	b.n	80069c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc7a 	bl	8007282 <USBD_CtlError>
              break;
 800698e:	e01b      	b.n	80069c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	885b      	ldrh	r3, [r3, #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10e      	bne.n	80069b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <USBD_StdEPReq+0xfe>
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d008      	beq.n	80069b6 <USBD_StdEPReq+0xfe>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f945 	bl	8007c40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd2e 	bl	8007418 <USBD_CtlSendStatus>

              break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc5e 	bl	8007282 <USBD_CtlError>
              break;
 80069c6:	bf00      	nop
          }
          break;
 80069c8:	e107      	b.n	8006bda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d002      	beq.n	80069dc <USBD_StdEPReq+0x124>
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d016      	beq.n	8006a08 <USBD_StdEPReq+0x150>
 80069da:	e04b      	b.n	8006a74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00d      	beq.n	80069fe <USBD_StdEPReq+0x146>
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d00a      	beq.n	80069fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f927 	bl	8007c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f923 	bl	8007c40 <USBD_LL_StallEP>
 80069fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069fc:	e040      	b.n	8006a80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fc3e 	bl	8007282 <USBD_CtlError>
              break;
 8006a06:	e03b      	b.n	8006a80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d136      	bne.n	8006a7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f92d 	bl	8007c7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fcf7 	bl	8007418 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fde2 	bl	80065f8 <USBD_CoreFindEP>
 8006a34:	4603      	mov	r3, r0
 8006a36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a38:	7b7b      	ldrb	r3, [r7, #13]
 8006a3a:	2bff      	cmp	r3, #255	; 0xff
 8006a3c:	d01f      	beq.n	8006a7e <USBD_StdEPReq+0x1c6>
 8006a3e:	7b7b      	ldrb	r3, [r7, #13]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11c      	bne.n	8006a7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a44:	7b7a      	ldrb	r2, [r7, #13]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a4c:	7b7a      	ldrb	r2, [r7, #13]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32ae      	adds	r2, #174	; 0xae
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a5c:	7b7a      	ldrb	r2, [r7, #13]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	; 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a72:	e004      	b.n	8006a7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fc03 	bl	8007282 <USBD_CtlError>
              break;
 8006a7c:	e000      	b.n	8006a80 <USBD_StdEPReq+0x1c8>
              break;
 8006a7e:	bf00      	nop
          }
          break;
 8006a80:	e0ab      	b.n	8006bda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d002      	beq.n	8006a94 <USBD_StdEPReq+0x1dc>
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d032      	beq.n	8006af8 <USBD_StdEPReq+0x240>
 8006a92:	e097      	b.n	8006bc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <USBD_StdEPReq+0x1f2>
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d004      	beq.n	8006aaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fbed 	bl	8007282 <USBD_CtlError>
                break;
 8006aa8:	e091      	b.n	8006bce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da0b      	bge.n	8006aca <USBD_StdEPReq+0x212>
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	e00b      	b.n	8006ae2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4413      	add	r3, r2
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2202      	movs	r2, #2
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fc37 	bl	8007364 <USBD_CtlSendData>
              break;
 8006af6:	e06a      	b.n	8006bce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da11      	bge.n	8006b24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	3324      	adds	r3, #36	; 0x24
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d117      	bne.n	8006b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fbb0 	bl	8007282 <USBD_CtlError>
                  break;
 8006b22:	e054      	b.n	8006bce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fb9d 	bl	8007282 <USBD_CtlError>
                  break;
 8006b48:	e041      	b.n	8006bce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da0b      	bge.n	8006b6a <USBD_StdEPReq+0x2b2>
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	3310      	adds	r3, #16
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	4413      	add	r3, r2
 8006b66:	3304      	adds	r3, #4
 8006b68:	e00b      	b.n	8006b82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <USBD_StdEPReq+0x2d8>
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b80      	cmp	r3, #128	; 0x80
 8006b8e:	d103      	bne.n	8006b98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e00e      	b.n	8006bb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f88d 	bl	8007cbc <USBD_LL_IsStallEP>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fbd1 	bl	8007364 <USBD_CtlSendData>
              break;
 8006bc2:	e004      	b.n	8006bce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fb5b 	bl	8007282 <USBD_CtlError>
              break;
 8006bcc:	bf00      	nop
          }
          break;
 8006bce:	e004      	b.n	8006bda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fb55 	bl	8007282 <USBD_CtlError>
          break;
 8006bd8:	bf00      	nop
      }
      break;
 8006bda:	e005      	b.n	8006be8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb4f 	bl	8007282 <USBD_CtlError>
      break;
 8006be4:	e000      	b.n	8006be8 <USBD_StdEPReq+0x330>
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	f200 8128 	bhi.w	8006e6a <USBD_GetDescriptor+0x276>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USBD_GetDescriptor+0x2c>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c3d 	.word	0x08006c3d
 8006c24:	08006c55 	.word	0x08006c55
 8006c28:	08006c95 	.word	0x08006c95
 8006c2c:	08006e6b 	.word	0x08006e6b
 8006c30:	08006e6b 	.word	0x08006e6b
 8006c34:	08006e0b 	.word	0x08006e0b
 8006c38:	08006e37 	.word	0x08006e37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7c12      	ldrb	r2, [r2, #16]
 8006c48:	f107 0108 	add.w	r1, r7, #8
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	60f8      	str	r0, [r7, #12]
      break;
 8006c52:	e112      	b.n	8006e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7c1b      	ldrb	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10d      	bne.n	8006c78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f107 0208 	add.w	r2, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2202      	movs	r2, #2
 8006c74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c76:	e100      	b.n	8006e7a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f107 0208 	add.w	r2, r7, #8
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
 8006c88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	2202      	movs	r2, #2
 8006c90:	701a      	strb	r2, [r3, #0]
      break;
 8006c92:	e0f2      	b.n	8006e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	885b      	ldrh	r3, [r3, #2]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	f200 80ac 	bhi.w	8006df8 <USBD_GetDescriptor+0x204>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <USBD_GetDescriptor+0xb4>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cf5 	.word	0x08006cf5
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d5d 	.word	0x08006d5d
 8006cb8:	08006d91 	.word	0x08006d91
 8006cbc:	08006dc5 	.word	0x08006dc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e091      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 facb 	bl	8007282 <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e089      	b.n	8006e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d16:	e077      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fab1 	bl	8007282 <USBD_CtlError>
            err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
          break;
 8006d26:	e06f      	b.n	8006e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4a:	e05d      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa97 	bl	8007282 <USBD_CtlError>
            err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5a:	e055      	b.n	8006e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7e:	e043      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa7d 	bl	8007282 <USBD_CtlError>
            err++;
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8e:	e03b      	b.n	8006e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	7c12      	ldrb	r2, [r2, #16]
 8006da8:	f107 0108 	add.w	r1, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db2:	e029      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa63 	bl	8007282 <USBD_CtlError>
            err++;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc2:	e021      	b.n	8006e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de6:	e00f      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa49 	bl	8007282 <USBD_CtlError>
            err++;
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	3301      	adds	r3, #1
 8006df4:	72fb      	strb	r3, [r7, #11]
          break;
 8006df6:	e007      	b.n	8006e08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa41 	bl	8007282 <USBD_CtlError>
          err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e06:	bf00      	nop
      }
      break;
 8006e08:	e037      	b.n	8006e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7c1b      	ldrb	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	f107 0208 	add.w	r2, r7, #8
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4798      	blx	r3
 8006e22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e24:	e029      	b.n	8006e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa2a 	bl	8007282 <USBD_CtlError>
        err++;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	3301      	adds	r3, #1
 8006e32:	72fb      	strb	r3, [r7, #11]
      break;
 8006e34:	e021      	b.n	8006e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4798      	blx	r3
 8006e4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	2207      	movs	r2, #7
 8006e56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e58:	e00f      	b.n	8006e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fa10 	bl	8007282 <USBD_CtlError>
        err++;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	3301      	adds	r3, #1
 8006e66:	72fb      	strb	r3, [r7, #11]
      break;
 8006e68:	e007      	b.n	8006e7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa08 	bl	8007282 <USBD_CtlError>
      err++;
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	3301      	adds	r3, #1
 8006e76:	72fb      	strb	r3, [r7, #11]
      break;
 8006e78:	bf00      	nop
  }

  if (err != 0U)
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11e      	bne.n	8006ebe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88da      	ldrh	r2, [r3, #6]
 8006e92:	893b      	ldrh	r3, [r7, #8]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf28      	it	cs
 8006e98:	4613      	movcs	r3, r2
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e9e:	893b      	ldrh	r3, [r7, #8]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa5d 	bl	8007364 <USBD_CtlSendData>
 8006eaa:	e009      	b.n	8006ec0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f9e7 	bl	8007282 <USBD_CtlError>
 8006eb4:	e004      	b.n	8006ec0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 faae 	bl	8007418 <USBD_CtlSendStatus>
 8006ebc:	e000      	b.n	8006ec0 <USBD_GetDescriptor+0x2cc>
    return;
 8006ebe:	bf00      	nop
  }
}
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	889b      	ldrh	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d131      	bne.n	8006f3e <USBD_SetAddress+0x76>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d12d      	bne.n	8006f3e <USBD_SetAddress+0x76>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee8:	d829      	bhi.n	8006f3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	885b      	ldrh	r3, [r3, #2]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d104      	bne.n	8006f0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9bc 	bl	8007282 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0a:	e01d      	b.n	8006f48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7bfa      	ldrb	r2, [r7, #15]
 8006f10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fefb 	bl	8007d14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa7a 	bl	8007418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	e009      	b.n	8006f48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3c:	e004      	b.n	8006f48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f99e 	bl	8007282 <USBD_CtlError>
  }
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	4b4e      	ldr	r3, [pc, #312]	; (80070a0 <USBD_SetConfig+0x150>)
 8006f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f68:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <USBD_SetConfig+0x150>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d905      	bls.n	8006f7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f985 	bl	8007282 <USBD_CtlError>
    return USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e08c      	b.n	8007096 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d002      	beq.n	8006f8e <USBD_SetConfig+0x3e>
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d029      	beq.n	8006fe0 <USBD_SetConfig+0x90>
 8006f8c:	e075      	b.n	800707a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f8e:	4b44      	ldr	r3, [pc, #272]	; (80070a0 <USBD_SetConfig+0x150>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f96:	4b42      	ldr	r3, [pc, #264]	; (80070a0 <USBD_SetConfig+0x150>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa0:	4b3f      	ldr	r3, [pc, #252]	; (80070a0 <USBD_SetConfig+0x150>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fe ffe7 	bl	8005f7a <USBD_SetClassConfig>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d008      	beq.n	8006fc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f962 	bl	8007282 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fc6:	e065      	b.n	8007094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa25 	bl	8007418 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fd6:	e05d      	b.n	8007094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa1d 	bl	8007418 <USBD_CtlSendStatus>
      break;
 8006fde:	e059      	b.n	8007094 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fe0:	4b2f      	ldr	r3, [pc, #188]	; (80070a0 <USBD_SetConfig+0x150>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d112      	bne.n	800700e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ff0:	4b2b      	ldr	r3, [pc, #172]	; (80070a0 <USBD_SetConfig+0x150>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ffa:	4b29      	ldr	r3, [pc, #164]	; (80070a0 <USBD_SetConfig+0x150>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fe ffd6 	bl	8005fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa06 	bl	8007418 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800700c:	e042      	b.n	8007094 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <USBD_SetConfig+0x150>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d02a      	beq.n	8007072 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe ffc4 	bl	8005fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800702a:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <USBD_SetConfig+0x150>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <USBD_SetConfig+0x150>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fe ff9d 	bl	8005f7a <USBD_SetClassConfig>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f918 	bl	8007282 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fe ffa9 	bl	8005fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007068:	e014      	b.n	8007094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9d4 	bl	8007418 <USBD_CtlSendStatus>
      break;
 8007070:	e010      	b.n	8007094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9d0 	bl	8007418 <USBD_CtlSendStatus>
      break;
 8007078:	e00c      	b.n	8007094 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f900 	bl	8007282 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007082:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <USBD_SetConfig+0x150>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fe ff92 	bl	8005fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	73fb      	strb	r3, [r7, #15]
      break;
 8007092:	bf00      	nop
  }

  return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200001bc 	.word	0x200001bc

080070a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d004      	beq.n	80070c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8e2 	bl	8007282 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070be:	e023      	b.n	8007108 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	dc02      	bgt.n	80070d2 <USBD_GetConfig+0x2e>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc03      	bgt.n	80070d8 <USBD_GetConfig+0x34>
 80070d0:	e015      	b.n	80070fe <USBD_GetConfig+0x5a>
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d00b      	beq.n	80070ee <USBD_GetConfig+0x4a>
 80070d6:	e012      	b.n	80070fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3308      	adds	r3, #8
 80070e2:	2201      	movs	r2, #1
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f93c 	bl	8007364 <USBD_CtlSendData>
        break;
 80070ec:	e00c      	b.n	8007108 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3304      	adds	r3, #4
 80070f2:	2201      	movs	r2, #1
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f934 	bl	8007364 <USBD_CtlSendData>
        break;
 80070fc:	e004      	b.n	8007108 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8be 	bl	8007282 <USBD_CtlError>
        break;
 8007106:	bf00      	nop
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	b2db      	uxtb	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	2b02      	cmp	r3, #2
 8007126:	d81e      	bhi.n	8007166 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	88db      	ldrh	r3, [r3, #6]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d004      	beq.n	800713a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f8a5 	bl	8007282 <USBD_CtlError>
        break;
 8007138:	e01a      	b.n	8007170 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f043 0202 	orr.w	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	330c      	adds	r3, #12
 800715a:	2202      	movs	r2, #2
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f900 	bl	8007364 <USBD_CtlSendData>
      break;
 8007164:	e004      	b.n	8007170 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f88a 	bl	8007282 <USBD_CtlError>
      break;
 800716e:	bf00      	nop
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f940 	bl	8007418 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007198:	e013      	b.n	80071c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d10b      	bne.n	80071ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	889b      	ldrh	r3, [r3, #4]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f930 	bl	8007418 <USBD_CtlSendStatus>
}
 80071b8:	e003      	b.n	80071c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f860 	bl	8007282 <USBD_CtlError>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d80b      	bhi.n	80071fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d10c      	bne.n	8007204 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f910 	bl	8007418 <USBD_CtlSendStatus>
      }
      break;
 80071f8:	e004      	b.n	8007204 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f840 	bl	8007282 <USBD_CtlError>
      break;
 8007202:	e000      	b.n	8007206 <USBD_ClrFeature+0x3c>
      break;
 8007204:	bf00      	nop
  }
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fa41 	bl	80066c0 <SWAPBYTE>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fa34 	bl	80066c0 <SWAPBYTE>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fa27 	bl	80066c0 <SWAPBYTE>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	80da      	strh	r2, [r3, #6]
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fcd6 	bl	8007c40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007294:	2100      	movs	r1, #0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fcd2 	bl	8007c40 <USBD_LL_StallEP>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d036      	beq.n	8007328 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072be:	6938      	ldr	r0, [r7, #16]
 80072c0:	f000 f836 	bl	8007330 <USBD_GetLen>
 80072c4:	4603      	mov	r3, r0
 80072c6:	3301      	adds	r3, #1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4413      	add	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	3301      	adds	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4413      	add	r3, r2
 80072ea:	2203      	movs	r2, #3
 80072ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	3301      	adds	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072f4:	e013      	b.n	800731e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4413      	add	r3, r2
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
    idx++;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	3301      	adds	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	4413      	add	r3, r2
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
    idx++;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	3301      	adds	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e7      	bne.n	80072f6 <USBD_GetString+0x52>
 8007326:	e000      	b.n	800732a <USBD_GetString+0x86>
    return;
 8007328:	bf00      	nop
  }
}
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007340:	e005      	b.n	800734e <USBD_GetLen+0x1e>
  {
    len++;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	3301      	adds	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3301      	adds	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f5      	bne.n	8007342 <USBD_GetLen+0x12>
  }

  return len;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2202      	movs	r2, #2
 8007374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	2100      	movs	r1, #0
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 fce1 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	2100      	movs	r1, #0
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fcd0 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2203      	movs	r2, #3
 80073cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fcd4 	bl	8007d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fcc3 	bl	8007d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2204      	movs	r2, #4
 8007424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fc8f 	bl	8007d52 <USBD_LL_Transmit>

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2205      	movs	r2, #5
 800744a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc9d 	bl	8007d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007468:	2200      	movs	r2, #0
 800746a:	4912      	ldr	r1, [pc, #72]	; (80074b4 <MX_USB_DEVICE_Init+0x50>)
 800746c:	4812      	ldr	r0, [pc, #72]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 800746e:	f7fe fd07 	bl	8005e80 <USBD_Init>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007478:	f7f9 f9ae 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800747c:	490f      	ldr	r1, [pc, #60]	; (80074bc <MX_USB_DEVICE_Init+0x58>)
 800747e:	480e      	ldr	r0, [pc, #56]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 8007480:	f7fe fd2e 	bl	8005ee0 <USBD_RegisterClass>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800748a:	f7f9 f9a5 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800748e:	490c      	ldr	r1, [pc, #48]	; (80074c0 <MX_USB_DEVICE_Init+0x5c>)
 8007490:	4809      	ldr	r0, [pc, #36]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 8007492:	f7fe fc1f 	bl	8005cd4 <USBD_CDC_RegisterInterface>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800749c:	f7f9 f99c 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 80074a2:	f7fe fd53 	bl	8005f4c <USBD_Start>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074ac:	f7f9 f994 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	200000ac 	.word	0x200000ac
 80074b8:	200001c0 	.word	0x200001c0
 80074bc:	20000018 	.word	0x20000018
 80074c0:	20000098 	.word	0x20000098

080074c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074c8:	2200      	movs	r2, #0
 80074ca:	4905      	ldr	r1, [pc, #20]	; (80074e0 <CDC_Init_FS+0x1c>)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <CDC_Init_FS+0x20>)
 80074ce:	f7fe fc1b 	bl	8005d08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <CDC_Init_FS+0x24>)
 80074d4:	4803      	ldr	r0, [pc, #12]	; (80074e4 <CDC_Init_FS+0x20>)
 80074d6:	f7fe fc39 	bl	8005d4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074dc:	4618      	mov	r0, r3
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	2000089c 	.word	0x2000089c
 80074e4:	200001c0 	.word	0x200001c0
 80074e8:	2000049c 	.word	0x2000049c

080074ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
 8007508:	4613      	mov	r3, r2
 800750a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b23      	cmp	r3, #35	; 0x23
 8007510:	d84a      	bhi.n	80075a8 <CDC_Control_FS+0xac>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <CDC_Control_FS+0x1c>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075a9 	.word	0x080075a9
 8007534:	080075a9 	.word	0x080075a9
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a9 	.word	0x080075a9
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	080075a9 	.word	0x080075a9
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075a9 	.word	0x080075a9
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	080075a9 	.word	0x080075a9
 80075a4:	080075a9 	.word	0x080075a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a8:	bf00      	nop
  }

  return (USBD_OK);
 80075aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4805      	ldr	r0, [pc, #20]	; (80075dc <CDC_Receive_FS+0x24>)
 80075c6:	f7fe fbc1 	bl	8005d4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ca:	4804      	ldr	r0, [pc, #16]	; (80075dc <CDC_Receive_FS+0x24>)
 80075cc:	f7fe fc22 	bl	8005e14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200001c0 	.word	0x200001c0

080075e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <CDC_Transmit_FS+0x48>)
 80075f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007602:	2301      	movs	r3, #1
 8007604:	e00b      	b.n	800761e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007606:	887b      	ldrh	r3, [r7, #2]
 8007608:	461a      	mov	r2, r3
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4806      	ldr	r0, [pc, #24]	; (8007628 <CDC_Transmit_FS+0x48>)
 800760e:	f7fe fb7b 	bl	8005d08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007612:	4805      	ldr	r0, [pc, #20]	; (8007628 <CDC_Transmit_FS+0x48>)
 8007614:	f7fe fbb8 	bl	8005d88 <USBD_CDC_TransmitPacket>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200001c0 	.word	0x200001c0

0800762c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800763e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007642:	4618      	mov	r0, r3
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2212      	movs	r2, #18
 8007660:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007662:	4b03      	ldr	r3, [pc, #12]	; (8007670 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	200000c8 	.word	0x200000c8

08007674 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2204      	movs	r2, #4
 8007684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	200000dc 	.word	0x200000dc

08007698 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4907      	ldr	r1, [pc, #28]	; (80076cc <USBD_FS_ProductStrDescriptor+0x34>)
 80076ae:	4808      	ldr	r0, [pc, #32]	; (80076d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076b0:	f7ff fdf8 	bl	80072a4 <USBD_GetString>
 80076b4:	e004      	b.n	80076c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4904      	ldr	r1, [pc, #16]	; (80076cc <USBD_FS_ProductStrDescriptor+0x34>)
 80076ba:	4805      	ldr	r0, [pc, #20]	; (80076d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076bc:	f7ff fdf2 	bl	80072a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c0:	4b02      	ldr	r3, [pc, #8]	; (80076cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000c9c 	.word	0x20000c9c
 80076d0:	08007ef4 	.word	0x08007ef4

080076d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	4904      	ldr	r1, [pc, #16]	; (80076f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076e4:	4804      	ldr	r0, [pc, #16]	; (80076f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076e6:	f7ff fddd 	bl	80072a4 <USBD_GetString>
  return USBD_StrDesc;
 80076ea:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20000c9c 	.word	0x20000c9c
 80076f8:	08007f0c 	.word	0x08007f0c

080076fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	6039      	str	r1, [r7, #0]
 8007706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	221a      	movs	r2, #26
 800770c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800770e:	f000 f843 	bl	8007798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007712:	4b02      	ldr	r3, [pc, #8]	; (800771c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200000e0 	.word	0x200000e0

08007720 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d105      	bne.n	800773e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	4907      	ldr	r1, [pc, #28]	; (8007754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007736:	4808      	ldr	r0, [pc, #32]	; (8007758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007738:	f7ff fdb4 	bl	80072a4 <USBD_GetString>
 800773c:	e004      	b.n	8007748 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4904      	ldr	r1, [pc, #16]	; (8007754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007742:	4805      	ldr	r0, [pc, #20]	; (8007758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007744:	f7ff fdae 	bl	80072a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000c9c 	.word	0x20000c9c
 8007758:	08007f20 	.word	0x08007f20

0800775c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	6039      	str	r1, [r7, #0]
 8007766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4907      	ldr	r1, [pc, #28]	; (8007790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007772:	4808      	ldr	r0, [pc, #32]	; (8007794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007774:	f7ff fd96 	bl	80072a4 <USBD_GetString>
 8007778:	e004      	b.n	8007784 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4904      	ldr	r1, [pc, #16]	; (8007790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800777e:	4805      	ldr	r0, [pc, #20]	; (8007794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007780:	f7ff fd90 	bl	80072a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007784:	4b02      	ldr	r3, [pc, #8]	; (8007790 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000c9c 	.word	0x20000c9c
 8007794:	08007f2c 	.word	0x08007f2c

08007798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <Get_SerialNum+0x44>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077a4:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <Get_SerialNum+0x48>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077aa:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <Get_SerialNum+0x4c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077be:	2208      	movs	r2, #8
 80077c0:	4909      	ldr	r1, [pc, #36]	; (80077e8 <Get_SerialNum+0x50>)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f814 	bl	80077f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077c8:	2204      	movs	r2, #4
 80077ca:	4908      	ldr	r1, [pc, #32]	; (80077ec <Get_SerialNum+0x54>)
 80077cc:	68b8      	ldr	r0, [r7, #8]
 80077ce:	f000 f80f 	bl	80077f0 <IntToUnicode>
  }
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	1fff7a10 	.word	0x1fff7a10
 80077e0:	1fff7a14 	.word	0x1fff7a14
 80077e4:	1fff7a18 	.word	0x1fff7a18
 80077e8:	200000e2 	.word	0x200000e2
 80077ec:	200000f2 	.word	0x200000f2

080077f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
 8007806:	e027      	b.n	8007858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	2b09      	cmp	r3, #9
 800780e:	d80b      	bhi.n	8007828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	0f1b      	lsrs	r3, r3, #28
 8007814:	b2da      	uxtb	r2, r3
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4619      	mov	r1, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	440b      	add	r3, r1
 8007820:	3230      	adds	r2, #48	; 0x30
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	e00a      	b.n	800783e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	0f1b      	lsrs	r3, r3, #28
 800782c:	b2da      	uxtb	r2, r3
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4619      	mov	r1, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	440b      	add	r3, r1
 8007838:	3237      	adds	r2, #55	; 0x37
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	3301      	adds	r3, #1
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	3301      	adds	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
 8007858:	7dfa      	ldrb	r2, [r7, #23]
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d3d3      	bcc.n	8007808 <IntToUnicode+0x18>
  }
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007890:	d13a      	bne.n	8007908 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	4b1e      	ldr	r3, [pc, #120]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	6313      	str	r3, [r2, #48]	; 0x30
 80078a2:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b4:	2302      	movs	r3, #2
 80078b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078bc:	2303      	movs	r3, #3
 80078be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078c0:	230a      	movs	r3, #10
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078c4:	f107 0314 	add.w	r3, r7, #20
 80078c8:	4619      	mov	r1, r3
 80078ca:	4812      	ldr	r0, [pc, #72]	; (8007914 <HAL_PCD_MspInit+0xa4>)
 80078cc:	f7f9 fa7a 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d4:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	6353      	str	r3, [r2, #52]	; 0x34
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e4:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078ea:	6453      	str	r3, [r2, #68]	; 0x44
 80078ec:	4b08      	ldr	r3, [pc, #32]	; (8007910 <HAL_PCD_MspInit+0xa0>)
 80078ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	2043      	movs	r0, #67	; 0x43
 80078fe:	f7f9 fa2a 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007902:	2043      	movs	r0, #67	; 0x43
 8007904:	f7f9 fa43 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007908:	bf00      	nop
 800790a:	3728      	adds	r7, #40	; 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	40023800 	.word	0x40023800
 8007914:	40020000 	.word	0x40020000

08007918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f7fe fb59 	bl	8005fe6 <USBD_LL_SetupStage>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	4619      	mov	r1, r3
 8007966:	f7fe fb93 	bl	8006090 <USBD_LL_DataOutStage>
}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	334c      	adds	r3, #76	; 0x4c
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	4619      	mov	r1, r3
 800799a:	f7fe fc2c 	bl	80061f6 <USBD_LL_DataInStage>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fd60 	bl	800647a <USBD_LL_SOF>
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079ca:	2301      	movs	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d001      	beq.n	80079da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079d6:	f7f8 feff 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079e0:	7bfa      	ldrb	r2, [r7, #15]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fd0a 	bl	80063fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fcb2 	bl	800635a <USBD_LL_Reset>
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fd05 	bl	800641e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <HAL_PCD_SuspendCallback+0x48>)
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <HAL_PCD_SuspendCallback+0x48>)
 8007a3a:	f043 0306 	orr.w	r3, r3, #6
 8007a3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed00 	.word	0xe000ed00

08007a4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fcf5 	bl	800644a <USBD_LL_Resume>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fd4d 	bl	800651e <USBD_LL_IsoOUTIncomplete>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fd09 	bl	80064ba <USBD_LL_IsoINIncomplete>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fd5f 	bl	8006582 <USBD_LL_DevConnected>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fd5c 	bl	8006598 <USBD_LL_DevDisconnected>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d13c      	bne.n	8007b72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007af8:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <USBD_LL_Init+0x94>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1e      	ldr	r2, [pc, #120]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b10:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b12:	2204      	movs	r2, #4
 8007b14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b16:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b18:	2202      	movs	r2, #2
 8007b1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b22:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b24:	2202      	movs	r2, #2
 8007b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b28:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b48:	f7f9 fad9 	bl	80010fe <HAL_PCD_Init>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b52:	f7f8 fe41 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b56:	2180      	movs	r1, #128	; 0x80
 8007b58:	4808      	ldr	r0, [pc, #32]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b5a:	f7fa fd30 	bl	80025be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b5e:	2240      	movs	r2, #64	; 0x40
 8007b60:	2100      	movs	r1, #0
 8007b62:	4806      	ldr	r0, [pc, #24]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b64:	f7fa fce4 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4803      	ldr	r0, [pc, #12]	; (8007b7c <USBD_LL_Init+0x94>)
 8007b6e:	f7fa fcdf 	bl	8002530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000e9c 	.word	0x20000e9c

08007b80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f9 fbce 	bl	8001338 <HAL_PCD_Start>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f942 	bl	8007e2c <USBD_Get_USB_Status>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	70fb      	strb	r3, [r7, #3]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70bb      	strb	r3, [r7, #2]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007bde:	78bb      	ldrb	r3, [r7, #2]
 8007be0:	883a      	ldrh	r2, [r7, #0]
 8007be2:	78f9      	ldrb	r1, [r7, #3]
 8007be4:	f7fa f89f 	bl	8001d26 <HAL_PCD_EP_Open>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f91c 	bl	8007e2c <USBD_Get_USB_Status>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fa f8e8 	bl	8001df6 <HAL_PCD_EP_Close>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f8fd 	bl	8007e2c <USBD_Get_USB_Status>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fa f9c0 	bl	8001fe4 <HAL_PCD_EP_SetStall>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8de 	bl	8007e2c <USBD_Get_USB_Status>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fa fa05 	bl	80020ac <HAL_PCD_EP_ClrStall>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f8bf 	bl	8007e2c <USBD_Get_USB_Status>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da0b      	bge.n	8007cf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	333e      	adds	r3, #62	; 0x3e
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	e00b      	b.n	8007d08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d2e:	78fa      	ldrb	r2, [r7, #3]
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7f9 ffd2 	bl	8001cdc <HAL_PCD_SetAddress>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f874 	bl	8007e2c <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d70:	7af9      	ldrb	r1, [r7, #11]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f7fa f8eb 	bl	8001f50 <HAL_PCD_EP_Transmit>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f853 	bl	8007e2c <USBD_Get_USB_Status>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007db2:	7af9      	ldrb	r1, [r7, #11]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	f7fa f867 	bl	8001e8a <HAL_PCD_EP_Receive>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f832 	bl	8007e2c <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fa f897 	bl	8001f20 <HAL_PCD_EP_GetRxCount>
 8007df2:	4603      	mov	r3, r0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <USBD_static_malloc+0x18>)
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200013a8 	.word	0x200013a8

08007e18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]

}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d817      	bhi.n	8007e70 <USBD_Get_USB_Status+0x44>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <USBD_Get_USB_Status+0x1c>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e5f 	.word	0x08007e5f
 8007e50:	08007e65 	.word	0x08007e65
 8007e54:	08007e6b 	.word	0x08007e6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e5c:	e00b      	b.n	8007e76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
    break;
 8007e62:	e008      	b.n	8007e76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	e005      	b.n	8007e76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6e:	e002      	b.n	8007e76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	73fb      	strb	r3, [r7, #15]
    break;
 8007e74:	bf00      	nop
  }
  return usb_status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <__libc_init_array>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4d0d      	ldr	r5, [pc, #52]	; (8007ebc <__libc_init_array+0x38>)
 8007e88:	4c0d      	ldr	r4, [pc, #52]	; (8007ec0 <__libc_init_array+0x3c>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	42a6      	cmp	r6, r4
 8007e92:	d109      	bne.n	8007ea8 <__libc_init_array+0x24>
 8007e94:	4d0b      	ldr	r5, [pc, #44]	; (8007ec4 <__libc_init_array+0x40>)
 8007e96:	4c0c      	ldr	r4, [pc, #48]	; (8007ec8 <__libc_init_array+0x44>)
 8007e98:	f000 f820 	bl	8007edc <_init>
 8007e9c:	1b64      	subs	r4, r4, r5
 8007e9e:	10a4      	asrs	r4, r4, #2
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	42a6      	cmp	r6, r4
 8007ea4:	d105      	bne.n	8007eb2 <__libc_init_array+0x2e>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eac:	4798      	blx	r3
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7ee      	b.n	8007e90 <__libc_init_array+0xc>
 8007eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb6:	4798      	blx	r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	e7f2      	b.n	8007ea2 <__libc_init_array+0x1e>
 8007ebc:	08007f5c 	.word	0x08007f5c
 8007ec0:	08007f5c 	.word	0x08007f5c
 8007ec4:	08007f5c 	.word	0x08007f5c
 8007ec8:	08007f60 	.word	0x08007f60

08007ecc <memset>:
 8007ecc:	4402      	add	r2, r0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d100      	bne.n	8007ed6 <memset+0xa>
 8007ed4:	4770      	bx	lr
 8007ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eda:	e7f9      	b.n	8007ed0 <memset+0x4>

08007edc <_init>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr

08007ee8 <_fini>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr
